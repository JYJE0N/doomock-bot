// src/config/ModuleRegistry.js
const logger = require("../utils/Logger");
const path = require("path");

/**
 * üìã ModuleRegistry - Î™®Îìà ÏÑ§Ï†ï Ï§ëÏïô Í¥ÄÎ¶¨
 * - Î™®Îì† Î™®ÎìàÏùò Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï†ïÏùò
 * - Î™®Îìà Í≤ΩÎ°ú, ÌôúÏÑ±Ìôî ÏÉÅÌÉú Í¥ÄÎ¶¨
 * - v3.0.1 ÌëúÏ§Ä Ï§ÄÏàò
 */

const ENABLED_MODULES = [
  // üè† ÏãúÏä§ÌÖú Î™®Îìà (ÌïÑÏàò)
  {
    name: "SystemModule",
    path: path.join(__dirname, "../modules/SystemModule.js"),
    enabled: true,
    priority: 1,
    description: "ÏãúÏä§ÌÖú ÌïµÏã¨ Í∏∞Îä•",
    dependencies: [],
  },

  // üìù Ìï†Ïùº Í¥ÄÎ¶¨ Î™®Îìà (ÏÉàÎ°ú Ï∂îÍ∞Ä!)
  {
    name: "TodoModule",
    path: path.join(__dirname, "../modules/TodoModule.js"),
    enabled: true,
    priority: 2,
    description: "Ìï†Ïùº Í¥ÄÎ¶¨ Î∞è Ï∂îÏ†Å",
    dependencies: ["MongooseManager"],
    keywords: ["Ìï†Ïùº", "todo", "üìù"],
    icon: "üìù",
    category: "productivity",
  },

  // ‚è∞ ÌÉÄÏù¥Î®∏ Î™®Îìà
  {
    name: "TimerModule",
    path: path.join(__dirname, "../modules/TimerModule.js"),
    enabled: true,
    priority: 3,
    description: "Ìè¨Î™®ÎèÑÎ°ú ÌÉÄÏù¥Î®∏",
    dependencies: ["MongooseManager"],
    keywords: ["ÌÉÄÏù¥Î®∏", "timer", "‚è∞"],
    icon: "‚è∞",
    category: "productivity",
  },

  // üè¢ Í∑ºÎ¨¥ÏãúÍ∞Ñ Î™®Îìà
  {
    name: "WorktimeModule",
    path: path.join(__dirname, "../modules/WorktimeModule.js"),
    enabled: true,
    priority: 4,
    description: "Ï∂úÌá¥Í∑º Î∞è Í∑ºÎ¨¥ÏãúÍ∞Ñ Í¥ÄÎ¶¨",
    dependencies: ["MongooseManager"],
    keywords: ["Ï∂úÍ∑º", "Ìá¥Í∑º", "Í∑ºÎ¨¥", "worktime", "üè¢"],
    icon: "üè¢",
    category: "work",
  },

  // üèñÔ∏è Ìú¥Í∞Ä Í¥ÄÎ¶¨ Î™®Îìà
  {
    name: "LeaveModule",
    path: path.join(__dirname, "../modules/LeaveModule.js"),
    enabled: true,
    priority: 5,
    description: "Ïó∞Ï∞® Î∞è Ìú¥Í∞Ä Í¥ÄÎ¶¨",
    dependencies: ["MongooseManager"],
    keywords: ["Ìú¥Í∞Ä", "Ïó∞Ï∞®", "leave", "üèñÔ∏è"],
    icon: "üèñÔ∏è",
    category: "work",
  },

  // ‚è∞ Î¶¨ÎßàÏù∏Îçî Î™®Îìà
  {
    name: "ReminderModule",
    path: path.join(__dirname, "../modules/ReminderModule.js"),
    enabled: false,
    priority: 6,
    description: "ÏïåÎ¶º Î∞è Î¶¨ÎßàÏù∏Îçî",
    dependencies: ["MongooseManager"],
    keywords: ["ÏïåÎ¶º", "reminder", "‚è∞"],
    icon: "üîî",
    category: "utility",
  },

  // üîÆ Ïö¥ÏÑ∏ Î™®Îìà
  {
    name: "FortuneModule",
    path: path.join(__dirname, "../modules/FortuneModule.js"),
    enabled: true,
    priority: 7,
    description: "Ïò§ÎäòÏùò Ïö¥ÏÑ∏",
    dependencies: [],
    keywords: ["Ïö¥ÏÑ∏", "fortune", "üîÆ"],
    icon: "üîÆ",
    category: "entertainment",
  },

  // üå§Ô∏è ÎÇ†Ïî® Î™®Îìà
  {
    name: "WeatherModule",
    path: path.join(__dirname, "../modules/WeatherModule.js"),
    enabled: true,
    priority: 8,
    description: "ÎÇ†Ïî® Ï†ïÎ≥¥",
    dependencies: [],
    keywords: ["ÎÇ†Ïî®", "weather", "üå§Ô∏è"],
    icon: "üå§Ô∏è",
    category: "utility",
  },

  // üîä TTS Î™®Îìà
  {
    name: "TTSModule",
    path: path.join(__dirname, "../modules/TTSModule.js"),
    enabled: true,
    priority: 9,
    description: "ÌÖçÏä§Ìä∏ ÏùåÏÑ± Î≥ÄÌôò",
    dependencies: ["MongooseManager"],
    keywords: ["tts", "ÏùåÏÑ±", "üîä"],
    icon: "üîä",
    category: "utility",
  },
];

/**
 * ÌôúÏÑ±ÌôîÎêú Î™®Îìà Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
 */
function getEnabledModules() {
  return ENABLED_MODULES.filter((module) => module.enabled).sort(
    (a, b) => a.priority - b.priority
  );
}

/**
 * Î™®ÎìàÎ≥Ñ Ïπ¥ÌÖåÍ≥†Î¶¨ Í∑∏Î£πÌïë
 */
function getModulesByCategory() {
  const enabledModules = getEnabledModules();
  const categories = {};

  enabledModules.forEach((module) => {
    const category = module.category || "other";
    if (!categories[category]) {
      categories[category] = [];
    }
    categories[category].push(module);
  });

  return categories;
}

/**
 * Î™®Îìà Ï†ïÎ≥¥ Ï°∞Ìöå
 */
function getModuleInfo(moduleName) {
  return ENABLED_MODULES.find(
    (module) =>
      module.name === moduleName ||
      module.name.toLowerCase() === moduleName.toLowerCase()
  );
}

/**
 * Î™®Îìà ÏùòÏ°¥ÏÑ± Í≤ÄÏ¶ù
 */
function validateModuleDependencies() {
  const errors = [];

  ENABLED_MODULES.forEach((module) => {
    if (module.dependencies && module.dependencies.length > 0) {
      module.dependencies.forEach((dep) => {
        // ÏùòÏ°¥ÏÑ± Í≤ÄÏ¶ù Î°úÏßÅ (Ï∂îÌõÑ Íµ¨ÌòÑ)
        logger.debug(`üì¶ ${module.name} ÏùòÏ°¥ÏÑ± ÌôïÏù∏: ${dep}`);
      });
    }
  });

  return errors;
}

/**
 * ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏö© Î™®Îìà Î©îÎâ¥ ÏÉùÏÑ±
 */
function buildModuleMenuButtons() {
  const enabledModules = getEnabledModules();
  const buttons = [];

  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥ÑÎ°ú Í∑∏Î£πÌïë
  const categories = getModulesByCategory();

  // ÏÉùÏÇ∞ÏÑ± ÎèÑÍµ¨ (Ï≤´ Î≤àÏß∏ Ï§Ñ)
  if (categories.productivity) {
    const productivityRow = categories.productivity.map((module) => ({
      text: `${module.icon} ${module.description}`,
      callback_data: `${module.name.toLowerCase().replace("module", "")}:menu`,
    }));

    // Ìïú Ï§ÑÏóê ÏµúÎåÄ 2Í∞úÏî©
    for (let i = 0; i < productivityRow.length; i += 2) {
      buttons.push(productivityRow.slice(i, i + 2));
    }
  }

  // ÏóÖÎ¨¥ Í¥ÄÎ¶¨ (Îëê Î≤àÏß∏ Ï§Ñ)
  if (categories.work) {
    const workRow = categories.work.map((module) => ({
      text: `${module.icon} ${module.description}`,
      callback_data: `${module.name.toLowerCase().replace("module", "")}:menu`,
    }));

    for (let i = 0; i < workRow.length; i += 2) {
      buttons.push(workRow.slice(i, i + 2));
    }
  }

  // Ïú†Ìã∏Î¶¨Ìã∞ (ÏÑ∏ Î≤àÏß∏ Ï§Ñ)
  if (categories.utility) {
    const utilityRow = categories.utility.map((module) => ({
      text: `${module.icon} ${module.description}`,
      callback_data: `${module.name.toLowerCase().replace("module", "")}:menu`,
    }));

    for (let i = 0; i < utilityRow.length; i += 2) {
      buttons.push(utilityRow.slice(i, i + 2));
    }
  }

  // ÏóîÌÑ∞ÌÖåÏù∏Î®ºÌä∏ (ÎßàÏßÄÎßâ Ï§Ñ)
  if (categories.entertainment) {
    const entertainmentRow = categories.entertainment.map((module) => ({
      text: `${module.icon} ${module.description}`,
      callback_data: `${module.name.toLowerCase().replace("module", "")}:menu`,
    }));

    for (let i = 0; i < entertainmentRow.length; i += 2) {
      buttons.push(entertainmentRow.slice(i, i + 2));
    }
  }

  return buttons;
}

module.exports = {
  ENABLED_MODULES,
  getEnabledModules,
  getModulesByCategory,
  getModuleInfo,
  validateModuleDependencies,
  buildModuleMenuButtons,
};
