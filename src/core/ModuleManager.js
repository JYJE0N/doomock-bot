// src/core/ModuleManager.js - Î™®Îìà Í¥ÄÎ¶¨Ïûê v3.0.1
const logger = require("../utils/Logger");
const TimeHelper = require("../utils/TimeHelper");

/**
 * üì¶ ModuleManager v3.0.1 (Î¶¨Ìå©ÌÜ†ÎßÅ)
 *
 * üîß Ï£ºÏöî Í∞úÏÑ†ÏÇ¨Ìï≠:
 * - Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ Î°úÏßÅ Í∞ïÌôî
 * - ÌëúÏ§Ä Îß§Í∞úÎ≥ÄÏàò Ï≤¥Í≥Ñ Ï§ÄÏàò
 * - ÏΩúÎ∞± Îç∞Ïù¥ÌÑ∞ ÌååÏã± Í∞úÏÑ†
 * - ÏóêÎü¨ Ï≤òÎ¶¨ ÌëúÏ§ÄÌôî
 * - Î™®Îìà ÏÉùÎ™ÖÏ£ºÍ∏∞ Í¥ÄÎ¶¨ Í∞úÏÑ†
 */
class ModuleManager {
  constructor(config = {}) {
    this.config = {
      timeout: 30000,
      maxRetries: 3,
      enableCache: true,
      ...config,
    };

    // üì¶ Î™®Îìà Í¥ÄÎ¶¨
    this.moduleRegistry = new Map();
    this.moduleInstances = new Map();
    this.initializingModules = new Set();

    // üö´ Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ
    this.processingCallbacks = new Set();
    this.processingMessages = new Set();

    // ‚è∞ Ï†ïÎ¶¨ ÌÉÄÏù¥Î®∏
    this.cleanupInterval = null;

    // üìä ÌÜµÍ≥Ñ
    this.stats = {
      totalModules: 0,
      activeModules: 0,
      failedModules: 0,
      callbacksHandled: 0,
      messagesHandled: 0,
      errorsCount: 0,
      averageInitTime: 0,
      totalInitTime: 0,
      averageResponseTime: 0,
      totalResponseTime: 0,
      lastActivity: null,
    };

    this.isInitialized = false;

    logger.info("üì¶ ModuleManager ÏÉùÏÑ±Îê®");
  }

  /**
   * üöÄ Î™®Îìà Í¥ÄÎ¶¨Ïûê Ï¥àÍ∏∞Ìôî
   */
  async initialize() {
    try {
      logger.moduleStart("ModuleManager", "3.0.1");

      // Îì±Î°ùÎêú Î™®ÎìàÎì§ Ï¥àÍ∏∞Ìôî
      await this.initializeAllModules();

      // Ï†ïÎ¶¨ ÏûëÏóÖ Ïä§ÏºÄÏ§Ñ
      this.scheduleCleanup();

      this.isInitialized = true;
      logger.success("‚úÖ ModuleManager Ï¥àÍ∏∞Ìôî ÏôÑÎ£å", {
        totalModules: this.stats.totalModules,
        activeModules: this.stats.activeModules,
        failedModules: this.stats.failedModules,
      });
    } catch (error) {
      logger.error("‚ùå ModuleManager Ï¥àÍ∏∞Ìôî Ïã§Ìå®:", error);
      throw error;
    }
  }

  // ===== üì¶ Î™®Îìà Îì±Î°ù Î∞è Í¥ÄÎ¶¨ =====

  /**
   * üìù Î™®Îìà Îì±Î°ù
   */
  registerModule(moduleKey, ModuleClass, config = {}) {
    try {
      // Î™®Îìà ÏÑ§Ï†ï Í≤ÄÏ¶ù
      if (!moduleKey || typeof moduleKey !== "string") {
        throw new Error("Î™®Îìà ÌÇ§Îäî Î¨∏ÏûêÏó¥Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§");
      }

      if (!ModuleClass || typeof ModuleClass !== "function") {
        throw new Error("Î™®Îìà ÌÅ¥ÎûòÏä§Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§");
      }

      // Ï§ëÎ≥µ Îì±Î°ù Î∞©ÏßÄ
      if (this.moduleRegistry.has(moduleKey)) {
        logger.warn(`‚ö†Ô∏è Î™®Îìà Ï§ëÎ≥µ Îì±Î°ù: ${moduleKey}`);
        return false;
      }

      // Î™®Îìà ÏÑ§Ï†ï Ï§ÄÎπÑ
      const moduleConfig = {
        key: moduleKey,
        name: config.name || moduleKey,
        description: config.description || `${moduleKey} Î™®Îìà`,
        ModuleClass,
        priority: config.priority || 50,
        required: config.required || false,
        enabled: config.enabled !== false,
        config: config.moduleConfig || {},
        registeredAt: TimeHelper.getTimestamp(),
        initialized: false,
        initializedAt: null,
        initError: null,
      };

      // Î†àÏßÄÏä§Ìä∏Î¶¨Ïóê Îì±Î°ù
      this.moduleRegistry.set(moduleKey, moduleConfig);
      this.stats.totalModules++;

      logger.info(`üìù Î™®Îìà Îì±Î°ùÎê®: ${moduleKey}`, {
        module: moduleKey,
        name: moduleConfig.name,
        priority: moduleConfig.priority,
        enabled: moduleConfig.enabled,
      });

      return true;
    } catch (error) {
      logger.error(`‚ùå Î™®Îìà Îì±Î°ù Ïã§Ìå® (${moduleKey}):`, error);
      return false;
    }
  }

  /**
   * üöÄ Î™®Îì† Î™®Îìà Ï¥àÍ∏∞Ìôî
   */
  async initializeAllModules() {
    logger.info("üöÄ Î™®Îì† Î™®Îìà Ï¥àÍ∏∞Ìôî ÏãúÏûë...");

    // Ïö∞ÏÑ†ÏàúÏúÑ ÏàúÏúºÎ°ú Ï†ïÎ†¨
    const sortedModules = Array.from(this.moduleRegistry.entries())
      .filter(([key, config]) => config.enabled)
      .sort(([, a], [, b]) => a.priority - b.priority);

    // ÏàúÏ∞®Ï†ÅÏúºÎ°ú Ï¥àÍ∏∞Ìôî
    for (const [moduleKey, moduleConfig] of sortedModules) {
      await this.initializeModule(moduleKey);
    }

    logger.success(
      `‚úÖ Î™®Îìà Ï¥àÍ∏∞Ìôî ÏôÑÎ£å: ${this.stats.activeModules}/${this.stats.totalModules}`
    );
  }

  /**
   * üîß Í∞úÎ≥Ñ Î™®Îìà Ï¥àÍ∏∞Ìôî
   */
  async initializeModule(moduleKey) {
    const startTime = Date.now();

    try {
      // Ï§ëÎ≥µ Ï¥àÍ∏∞Ìôî Î∞©ÏßÄ
      if (this.initializingModules.has(moduleKey)) {
        logger.debug(`üîÑ ${moduleKey} Ïù¥ÎØ∏ Ï¥àÍ∏∞Ìôî Ï§ë`);
        return;
      }

      const moduleConfig = this.moduleRegistry.get(moduleKey);
      if (!moduleConfig) {
        throw new Error(`Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ Î™®Îìà: ${moduleKey}`);
      }

      if (moduleConfig.initialized) {
        logger.debug(`‚úÖ ${moduleKey} Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎê®`);
        return;
      }

      this.initializingModules.add(moduleKey);
      logger.debug(`üîß ${moduleConfig.name} Ï¥àÍ∏∞Ìôî Ï§ë...`);

      // ‚úÖ ÏàòÏ†ï: Î™®Îìà Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Ïãú ServiceBuilder Ï†ÑÎã¨
      const moduleInstance = new moduleConfig.ModuleClass(
        this.config.bot || this.bot,
        {
          bot: this.config.bot || this.bot,
          db: this.config.db || this.db,
          serviceBuilder: this.serviceBuilder || this.config.serviceBuilder, // ‚≠ê ServiceBuilder Ï∂îÍ∞Ä!
          moduleManager: this,
          moduleKey: moduleKey,
          moduleConfig: moduleConfig.config,
          config: moduleConfig.config,
        }
      );

      // Î™®Îìà Ï¥àÍ∏∞Ìôî
      if (typeof moduleInstance.initialize === "function") {
        await moduleInstance.initialize();
      }

      // Ïù∏Ïä§ÌÑ¥Ïä§ Îì±Î°ù
      this.moduleInstances.set(moduleKey, moduleInstance);

      // Ï¥àÍ∏∞Ìôî ÏôÑÎ£å ÌëúÏãú
      moduleConfig.initialized = true;
      moduleConfig.initializedAt = TimeHelper.getTimestamp();

      // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
      const initTime = Date.now() - startTime;
      this.updateInitTimeStats(initTime);
      this.stats.activeModules++;

      logger.success(`‚úÖ ${moduleConfig.name} Ï¥àÍ∏∞Ìôî ÏôÑÎ£å (${initTime}ms)`);
    } catch (error) {
      logger.error(`‚ùå ${moduleKey} Ï¥àÍ∏∞Ìôî Ïã§Ìå®:`, error);

      const moduleConfig = this.moduleRegistry.get(moduleKey);
      if (moduleConfig) {
        moduleConfig.initError = error.message;
        this.stats.failedModules++;
      }

      throw error;
    } finally {
      this.initializingModules.delete(moduleKey);
    }
  }

  // ===== üéØ ÏΩúÎ∞± Î∞è Î©îÏãúÏßÄ Ï≤òÎ¶¨ (ÌëúÏ§Ä Ìå®ÌÑ¥) =====

  /**
   * üéØ ÏΩúÎ∞± Ï≤òÎ¶¨ (NavigationHandlerÏóêÏÑú Ìò∏Ï∂ú)
   * ÌëúÏ§Ä Îß§Í∞úÎ≥ÄÏàò: (bot, callbackQuery, subAction, params, moduleManager)
   */
  async handleCallback(bot, callbackQuery, subAction, params, moduleManager) {
    const callbackId = callbackQuery.id;
    const startTime = Date.now();

    try {
      // üö´ Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ
      if (this.processingCallbacks.has(callbackId)) {
        logger.debug(`üîÑ Ï§ëÎ≥µ ÏΩúÎ∞± Î¨¥Ïãú: ${callbackId}`);
        return true;
      }
      this.processingCallbacks.add(callbackId);

      // üìã ÏΩúÎ∞± Îç∞Ïù¥ÌÑ∞ ÌååÏã±
      const { moduleKey, action, additionalParams } = this.parseCallbackData(
        callbackQuery.data
      );

      logger.debug(
        `üéØ ModuleManager ÏΩúÎ∞±: ${moduleKey}:${action}${
          additionalParams.length > 0 ? `:${additionalParams.join(":")}` : ""
        }`
      );

      // üîç Î™®Îìà Ï°¥Ïû¨ ÌôïÏù∏
      if (!this.hasModule(moduleKey)) {
        logger.warn(`‚ùì Î™®Îìà ÏóÜÏùå: ${moduleKey}`);
        return false;
      }

      // üì¶ Î™®Îìà Ïù∏Ïä§ÌÑ¥Ïä§ Í∞ÄÏ†∏Ïò§Í∏∞
      const moduleInstance = this.getModule(moduleKey);
      if (!moduleInstance) {
        logger.warn(`‚ùì Î™®Îìà Ïù∏Ïä§ÌÑ¥Ïä§ ÏóÜÏùå: ${moduleKey}`);
        return false;
      }

      // üéØ ÏΩúÎ∞± Ï≤òÎ¶¨ (ÌëúÏ§Ä Îß§Í∞úÎ≥ÄÏàò ÏÇ¨Ïö©)
      if (typeof moduleInstance.handleCallback === "function") {
        const handled = await moduleInstance.handleCallback(
          bot,
          callbackQuery,
          action, // subAction
          additionalParams, // params
          this // moduleManager
        );

        if (handled) {
          this.stats.callbacksHandled++;
          this.stats.lastActivity = TimeHelper.getLogTimeString();
          return true;
        }
      }

      logger.debug(`‚ùì Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ ÏΩúÎ∞±: ${moduleKey}:${action}`);
      return false;
    } catch (error) {
      logger.error("‚ùå ModuleManager ÏΩúÎ∞± Ï≤òÎ¶¨ Ïò§Î•ò:", error);
      this.stats.errorsCount++;
      return false;
    } finally {
      // üßπ Ï†ïÎ¶¨
      this.processingCallbacks.delete(callbackId);

      // üìä ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
      const responseTime = Date.now() - startTime;
      this.updateResponseTimeStats(responseTime);
    }
  }

  /**
   * üí¨ Î©îÏãúÏßÄ Ï≤òÎ¶¨ (ÌëúÏ§Ä Ìå®ÌÑ¥)
   */
  async handleMessage(bot, msg) {
    const messageId = `${msg.from.id}_${msg.message_id}`;
    const startTime = Date.now();

    try {
      // üö´ Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ
      if (this.processingMessages.has(messageId)) {
        logger.debug(`üîÑ Ï§ëÎ≥µ Î©îÏãúÏßÄ Î¨¥Ïãú: ${messageId}`);
        return;
      }
      this.processingMessages.add(messageId);

      logger.debug("üí¨ ModuleManager Î©îÏãúÏßÄ Ï≤òÎ¶¨ ÏãúÏûë");

      // Ïö∞ÏÑ†ÏàúÏúÑ ÏàúÏúºÎ°ú Î™®ÎìàÏóê Î©îÏãúÏßÄ Ï†ÑÎã¨
      const sortedKeys = Array.from(this.moduleInstances.keys()).sort(
        (a, b) => {
          const configA = this.moduleRegistry.get(a);
          const configB = this.moduleRegistry.get(b);
          return configA.priority - configB.priority;
        }
      );

      for (const moduleKey of sortedKeys) {
        const moduleInstance = this.moduleInstances.get(moduleKey);

        if (
          moduleInstance &&
          typeof moduleInstance.handleMessage === "function"
        ) {
          try {
            const handled = await moduleInstance.handleMessage(bot, msg);

            if (handled) {
              logger.debug(`‚úÖ Î©îÏãúÏßÄ Ï≤òÎ¶¨Îê®: ${moduleKey}`);
              this.stats.messagesHandled++;
              this.stats.lastActivity = TimeHelper.getLogTimeString();
              return;
            }
          } catch (moduleError) {
            logger.error(`‚ùå ${moduleKey} Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïò§Î•ò:`, moduleError);
            continue; // Îã§Ïùå Î™®Îìà ÏãúÎèÑ
          }
        }
      }

      logger.debug("üí¨ Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Î©îÏãúÏßÄ");
    } catch (error) {
      logger.error("‚ùå ModuleManager Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
      this.stats.errorsCount++;
    } finally {
      // üßπ Ï†ïÎ¶¨
      this.processingMessages.delete(messageId);

      // üìä ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
      const responseTime = Date.now() - startTime;
      this.updateResponseTimeStats(responseTime);
    }
  }

  // ===== üîß Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§ =====

  /**
   * üîç ÏΩúÎ∞± Îç∞Ïù¥ÌÑ∞ ÌååÏã± (ÌëúÏ§Ä ÌòïÏãù)
   */
  parseCallbackData(callbackData) {
    try {
      if (!callbackData || typeof callbackData !== "string") {
        logger.warn("‚ùì ModuleManager: Îπà ÏΩúÎ∞± Îç∞Ïù¥ÌÑ∞");
        return {
          moduleKey: "system",
          action: "menu",
          additionalParams: [],
        };
      }

      // üîç ÏΩúÎ°†(:) Í∏∞Ï§ÄÏúºÎ°ú ÌååÏã±
      const parts = callbackData.split(":");

      const result = {
        moduleKey: parts[0] || "system",
        action: parts[1] || "menu",
        additionalParams: parts.slice(2) || [],
      };

      // üîç ÏÉÅÏÑ∏ ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏
      if (logger.level === "debug") {
        logger.debug(
          `üîç ModuleManager ÌååÏã±: "${callbackData}" ‚Üí ${result.moduleKey}:${
            result.action
          }${
            result.additionalParams.length > 0
              ? `:${result.additionalParams.join(":")}`
              : ""
          }`
        );
      }

      return result;
    } catch (error) {
      logger.error("‚ùå ModuleManager ÏΩúÎ∞± ÌååÏã± Ïò§Î•ò:", error);
      return {
        moduleKey: "system",
        action: "menu",
        additionalParams: [],
      };
    }
  }

  /**
   * üîç Î™®Îìà Ï°¥Ïû¨ ÌôïÏù∏
   */
  hasModule(moduleKey) {
    return this.moduleInstances.has(moduleKey);
  }

  /**
   * üì¶ Î™®Îìà Ïù∏Ïä§ÌÑ¥Ïä§ Í∞ÄÏ†∏Ïò§Í∏∞
   */
  getModule(moduleKey) {
    return this.moduleInstances.get(moduleKey);
  }

  /**
   * üìã ÌôúÏÑ± Î™®Îìà Î™©Î°ù Ï°∞Ìöå
   */
  getActiveModules() {
    return Array.from(this.moduleInstances.keys());
  }

  /**
   * üìä ÌôúÏÑ± Î™®Îìà ÏÉÅÌÉú Ï°∞Ìöå
   */
  getActiveModulesStatus() {
    const modules = [];

    for (const [key, instance] of this.moduleInstances.entries()) {
      const config = this.moduleRegistry.get(key);
      if (config) {
        modules.push({
          key,
          name: config.name,
          description: config.description,
          priority: config.priority,
          status: instance.getStatus ? instance.getStatus() : { active: true },
        });
      }
    }

    return modules.sort((a, b) => a.priority - b.priority);
  }

  /**
   * ‚è∞ Ï†ïÎ¶¨ ÏûëÏóÖ Ïä§ÏºÄÏ§Ñ
   */
  scheduleCleanup() {
    // 3Î∂ÑÎßàÎã§ Ïò§ÎûòÎêú Ï≤òÎ¶¨ ÏÑ∏Ìä∏ Ï†ïÎ¶¨
    this.cleanupInterval = setInterval(() => {
      this.cleanupStaleProcesses();
    }, 3 * 60 * 1000);

    logger.debug("‚è∞ ModuleManager ÏûêÎèô Ï†ïÎ¶¨ ÏûëÏóÖ ÏòàÏïΩÎê® (3Î∂Ñ Í∞ÑÍ≤©)");
  }

  /**
   * üßπ Ïò§ÎûòÎêú ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨
   */
  cleanupStaleProcesses() {
    const callbacksSize = this.processingCallbacks.size;
    const messagesSize = this.processingMessages.size;

    // Ï≤òÎ¶¨ Ï§ëÏù∏ Ìï≠Î™©Îì§Ïù¥ ÎÑàÎ¨¥ ÎßéÏúºÎ©¥ Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨ ÎàÑÏàò Î∞©ÏßÄ)
    if (callbacksSize > 100) {
      this.processingCallbacks.clear();
      logger.warn(`üßπ ModuleManager ÏΩúÎ∞± Ï≤òÎ¶¨ Îßµ Ï†ïÎ¶¨Îê® (${callbacksSize}Í∞ú)`);
    }

    if (messagesSize > 100) {
      this.processingMessages.clear();
      logger.warn(`üßπ ModuleManager Î©îÏãúÏßÄ Ï≤òÎ¶¨ Îßµ Ï†ïÎ¶¨Îê® (${messagesSize}Í∞ú)`);
    }
  }

  /**
   * üìä Ï¥àÍ∏∞Ìôî ÏãúÍ∞Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
   */
  updateInitTimeStats(initTime) {
    this.stats.totalInitTime += initTime;
    const activeModules = this.stats.activeModules;

    if (activeModules > 0) {
      this.stats.averageInitTime = Math.round(
        this.stats.totalInitTime / activeModules
      );
    }
  }

  /**
   * üìä ÏùëÎãµ ÏãúÍ∞Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
   */
  updateResponseTimeStats(responseTime) {
    this.stats.totalResponseTime += responseTime;
    const totalRequests =
      this.stats.callbacksHandled + this.stats.messagesHandled;

    if (totalRequests > 0) {
      this.stats.averageResponseTime = Math.round(
        this.stats.totalResponseTime / totalRequests
      );
    }
  }

  // ===== üîÑ Î™®Îìà ÏÉùÎ™ÖÏ£ºÍ∏∞ Í¥ÄÎ¶¨ =====

  /**
   * üîÑ Î™®Îìà Ïû¨ÏãúÏûë
   */
  async restartModule(moduleKey) {
    try {
      logger.info(`üîÑ ${moduleKey} Î™®Îìà Ïû¨ÏãúÏûë Ï§ë...`);

      // Í∏∞Ï°¥ Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ïÎ¶¨
      await this.stopModule(moduleKey);

      // Îã§Ïãú Ï¥àÍ∏∞Ìôî
      await this.initializeModule(moduleKey);

      logger.success(`‚úÖ ${moduleKey} Î™®Îìà Ïû¨ÏãúÏûë ÏôÑÎ£å`);
      return true;
    } catch (error) {
      logger.error(`‚ùå ${moduleKey} Î™®Îìà Ïû¨ÏãúÏûë Ïã§Ìå®:`, error);
      return false;
    }
  }

  /**
   * üõë Î™®Îìà Ï§ëÏßÄ
   */
  async stopModule(moduleKey) {
    try {
      const moduleInstance = this.moduleInstances.get(moduleKey);
      const moduleConfig = this.moduleRegistry.get(moduleKey);

      if (moduleInstance) {
        // Ï†ïÎ¶¨ Î©îÏÑúÎìú Ìò∏Ï∂ú
        if (typeof moduleInstance.cleanup === "function") {
          await moduleInstance.cleanup();
        }

        // Ïù∏Ïä§ÌÑ¥Ïä§ Ï†úÍ±∞
        this.moduleInstances.delete(moduleKey);
        this.stats.activeModules--;
      }

      if (moduleConfig) {
        moduleConfig.initialized = false;
        moduleConfig.initializedAt = null;
      }

      logger.info(`üõë ${moduleKey} Î™®Îìà Ï§ëÏßÄÎê®`);
      return true;
    } catch (error) {
      logger.error(`‚ùå ${moduleKey} Î™®Îìà Ï§ëÏßÄ Ïã§Ìå®:`, error);
      return false;
    }
  }

  /**
   * üîÑ Î™®Îì† Î™®Îìà Ïû¨ÏãúÏûë
   */
  async restartAllModules() {
    try {
      logger.info("üîÑ Î™®Îì† Î™®Îìà Ïû¨ÏãúÏûë Ï§ë...");

      // Î™®Îì† Î™®Îìà Ï§ëÏßÄ
      const moduleKeys = Array.from(this.moduleInstances.keys());
      for (const moduleKey of moduleKeys) {
        await this.stopModule(moduleKey);
      }

      // Î™®Îì† Î™®Îìà Ïû¨ÏãúÏûë
      await this.initializeAllModules();

      logger.success("‚úÖ Î™®Îì† Î™®Îìà Ïû¨ÏãúÏûë ÏôÑÎ£å");
      return true;
    } catch (error) {
      logger.error("‚ùå Î™®Îì† Î™®Îìà Ïû¨ÏãúÏûë Ïã§Ìå®:", error);
      return false;
    }
  }

  // ===== üìä ÏÉÅÌÉú Î∞è ÌÜµÍ≥Ñ =====

  /**
   * üìä ModuleManager ÏÉÅÌÉú Ï°∞Ìöå
   */
  getStatus() {
    return {
      className: "ModuleManager",
      version: "3.0.1",
      isInitialized: this.isInitialized,
      stats: {
        ...this.stats,
        processing: {
          callbacks: this.processingCallbacks.size,
          messages: this.processingMessages.size,
        },
      },
      modules: {
        registered: this.moduleRegistry.size,
        instances: this.moduleInstances.size,
        active: this.getActiveModules(),
        initializing: Array.from(this.initializingModules),
      },
      config: this.config,
      lastActivity: this.stats.lastActivity,
    };
  }

  /**
   * üìä ÏÉÅÏÑ∏ Î™®Îìà ÏÉÅÌÉú ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
   */
  generateStatusText() {
    const status = this.getStatus();

    let text = `üì¶ **ModuleManager v3.0.1 ÏÉÅÌÉú**\n\n`;

    text += `**üîß ÏãúÏä§ÌÖú ÏÉÅÌÉú**:\n`;
    text += `‚Ä¢ Ï¥àÍ∏∞Ìôî: ${status.isInitialized ? "‚úÖ" : "‚ùå"}\n`;
    text += `‚Ä¢ Îì±Î°ùÎêú Î™®Îìà: ${status.stats.totalModules}Í∞ú\n`;
    text += `‚Ä¢ ÌôúÏÑ± Î™®Îìà: ${status.stats.activeModules}Í∞ú\n`;
    text += `‚Ä¢ Ïã§Ìå® Î™®Îìà: ${status.stats.failedModules}Í∞ú\n\n`;

    text += `**üìä Ï≤òÎ¶¨ ÌÜµÍ≥Ñ**:\n`;
    text += `‚Ä¢ ÏΩúÎ∞± Ï≤òÎ¶¨: ${status.stats.callbacksHandled}Ìöå\n`;
    text += `‚Ä¢ Î©îÏãúÏßÄ Ï≤òÎ¶¨: ${status.stats.messagesHandled}Ìöå\n`;
    text += `‚Ä¢ ÌèâÍ∑† ÏùëÎãµ: ${status.stats.averageResponseTime}ms\n`;
    text += `‚Ä¢ ÌèâÍ∑† Ï¥àÍ∏∞Ìôî: ${status.stats.averageInitTime}ms\n`;
    text += `‚Ä¢ ÏóêÎü¨: ${status.stats.errorsCount}Í∞ú\n\n`;

    text += `**‚ö° ÌòÑÏû¨ Ï≤òÎ¶¨**:\n`;
    text += `‚Ä¢ ÏΩúÎ∞±: ${status.stats.processing.callbacks}Í∞ú\n`;
    text += `‚Ä¢ Î©îÏãúÏßÄ: ${status.stats.processing.messages}Í∞ú\n\n`;

    // ÌôúÏÑ± Î™®Îìà Î™©Î°ù
    if (status.modules.active.length > 0) {
      text += `**üìã ÌôúÏÑ± Î™®Îìà**:\n`;
      const activeModules = this.getActiveModulesStatus();
      activeModules.forEach((module) => {
        text += `‚Ä¢ ${module.name} (${module.key})\n`;
      });
    }

    return text;
  }

  /**
   * üßÆ Î™®ÎìàÎ≥Ñ ÌÜµÍ≥Ñ Ï°∞Ìöå
   */
  getModuleStats() {
    const stats = {};

    for (const [key, instance] of this.moduleInstances.entries()) {
      if (instance.getStatus && typeof instance.getStatus === "function") {
        stats[key] = instance.getStatus();
      }
    }

    return stats;
  }

  // ===== üõë Ï†ïÎ¶¨ ÏûëÏóÖ =====

  /**
   * üõë ModuleManager Ï†ïÎ¶¨
   */
  async cleanup() {
    try {
      logger.info("üõë ModuleManager Ï†ïÎ¶¨ ÏãúÏûë...");

      // Ï†ïÎ¶¨ ÌÉÄÏù¥Î®∏ Ï§ëÏßÄ
      if (this.cleanupInterval) {
        clearInterval(this.cleanupInterval);
        this.cleanupInterval = null;
      }

      // Î™®Îì† Î™®Îìà Ï†ïÎ¶¨
      const moduleKeys = Array.from(this.moduleInstances.keys());
      for (const moduleKey of moduleKeys) {
        await this.stopModule(moduleKey);
      }

      // Ï≤òÎ¶¨ Îßµ Ï†ïÎ¶¨
      this.processingCallbacks.clear();
      this.processingMessages.clear();
      this.initializingModules.clear();

      // Î†àÏßÄÏä§Ìä∏Î¶¨ Ï†ïÎ¶¨
      this.moduleRegistry.clear();
      this.moduleInstances.clear();

      // ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî
      this.stats = {
        totalModules: 0,
        activeModules: 0,
        failedModules: 0,
        callbacksHandled: 0,
        messagesHandled: 0,
        errorsCount: 0,
        averageInitTime: 0,
        totalInitTime: 0,
        averageResponseTime: 0,
        totalResponseTime: 0,
        lastActivity: null,
      };

      this.isInitialized = false;
      logger.success("‚úÖ ModuleManager Ï†ïÎ¶¨ ÏôÑÎ£å");
    } catch (error) {
      logger.error("‚ùå ModuleManager Ï†ïÎ¶¨ Ïã§Ìå®:", error);
    }
  }

  // ===== üîß Í≥†Í∏â Í∏∞Îä•Îì§ =====

  /**
   * üîç Î™®Îìà Í≤ÄÏÉâ
   */
  findModules(searchTerm) {
    const results = [];

    for (const [key, config] of this.moduleRegistry.entries()) {
      if (
        key.toLowerCase().includes(searchTerm.toLowerCase()) ||
        config.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        config.description.toLowerCase().includes(searchTerm.toLowerCase())
      ) {
        results.push({
          key,
          ...config,
          isActive: this.moduleInstances.has(key),
        });
      }
    }

    return results;
  }

  /**
   * üìä ÏÑ±Îä• Î∂ÑÏÑù
   */
  getPerformanceAnalysis() {
    const modules = this.getActiveModulesStatus();
    const analysis = {
      totalModules: modules.length,
      averageResponseTime: this.stats.averageResponseTime,
      totalRequests: this.stats.callbacksHandled + this.stats.messagesHandled,
      errorRate:
        this.stats.errorsCount /
        Math.max(1, this.stats.callbacksHandled + this.stats.messagesHandled),
      modulePerformance: [],
    };

    // Í∞Å Î™®ÎìàÏùò ÏÑ±Îä• Ï†ïÎ≥¥ ÏàòÏßë
    for (const module of modules) {
      if (module.status && module.status.stats) {
        analysis.modulePerformance.push({
          key: module.key,
          name: module.name,
          requests:
            (module.status.stats.callbacksHandled || 0) +
            (module.status.stats.messagesHandled || 0),
          errors: module.status.stats.errorsCount || 0,
          averageResponseTime: module.status.stats.averageResponseTime || 0,
        });
      }
    }

    return analysis;
  }

  /**
   * üîß Î™®Îìà ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
   */
  updateModuleConfig(moduleKey, newConfig) {
    try {
      const moduleConfig = this.moduleRegistry.get(moduleKey);
      if (!moduleConfig) {
        throw new Error(`Î™®ÎìàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: ${moduleKey}`);
      }

      // ÏÑ§Ï†ï Î≥ëÌï©
      moduleConfig.config = { ...moduleConfig.config, ...newConfig };

      // ÌôúÏÑ± Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä ÏûàÏúºÎ©¥ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
      const moduleInstance = this.moduleInstances.get(moduleKey);
      if (moduleInstance && typeof moduleInstance.updateConfig === "function") {
        moduleInstance.updateConfig(moduleConfig.config);
      }

      logger.info(`üîß ${moduleKey} ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏Îê®`);
      return true;
    } catch (error) {
      logger.error(`‚ùå ${moduleKey} ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:`, error);
      return false;
    }
  }

  /**
   * üíæ Î™®Îìà ÏÉÅÌÉú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
   */
  exportModuleStates() {
    const states = {
      timestamp: TimeHelper.getTimestamp(),
      moduleManager: this.getStatus(),
      modules: {},
    };

    for (const [key, instance] of this.moduleInstances.entries()) {
      if (instance.getStatus && typeof instance.getStatus === "function") {
        states.modules[key] = instance.getStatus();
      }
    }

    return states;
  }
  /**
   * üèóÔ∏è ServiceBuilder ÏÑ§Ï†ï (ModuleManager ÏÉùÏÑ±ÏûêÏóê Ï∂îÍ∞Ä)
   */
  setServiceBuilder(serviceBuilder) {
    this.serviceBuilder = serviceBuilder;
    logger.debug("üèóÔ∏è ServiceBuilder Ïó∞Í≤∞Îê®");
  }

  /**
   * üîç ServiceBuilder Í∞ÄÏ†∏Ïò§Í∏∞
   */
  getServiceBuilder() {
    return this.serviceBuilder;
  }
}
// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§
let moduleManagerInstance = null;

/**
 * ModuleManager Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± ÎòêÎäî Î∞òÌôò
 */
function createModuleManager(config = {}) {
  if (!moduleManagerInstance) {
    moduleManagerInstance = new ModuleManager(config);
  }
  return moduleManagerInstance;
}

module.exports = { ModuleManager, createModuleManager };
