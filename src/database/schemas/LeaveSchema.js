// src/database/schemas/LeaveSchema.js - Ìú¥Í∞Ä Í¥ÄÎ¶¨ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà

/**
 * üèñÔ∏è Ìú¥Í∞Ä Í¥ÄÎ¶¨ MongoDB Ïª¨Î†âÏÖò Ïä§ÌÇ§Îßà
 * Ïª¨Î†âÏÖòÎ™Ö: leave_management
 *
 * ‚≠ê ÌëúÏ§ÄÌôîÎêú Ìú¥Í∞Ä ÌÉÄÏûÖ ÏãúÏä§ÌÖú
 * - ANNUAL: Ïó∞Ï∞® (1Ïùº, 0.5Ïùº, 0.25Ïùº)
 * - MONTHLY: ÏõîÏ∞® (1Ïùº, 0.5Ïùº, 0.25Ïùº)
 * - HALF_DAY: Î∞òÏ∞® (0.5Ïùº Í≥†Ï†ï)
 * - QUARTER_DAY: Î∞òÎ∞òÏ∞® (0.25Ïùº Í≥†Ï†ï)
 * - SICK: Î≥ëÍ∞Ä (Ï∞®Í∞ê ÏóÜÏùå)
 */

const LeaveUserSchema = {
  // üîë Í∏∞Î≥∏ ÏãùÎ≥ÑÏûê
  userKey: String, // "${userId}_${year}" ÌòïÌÉúÏùò Ïú†ÎãàÌÅ¨ ÌÇ§
  userId: Number, // ÌÖîÎ†àÍ∑∏Îû® ÏÇ¨Ïö©Ïûê ID
  year: Number, // Ïó∞ÎèÑ (2025, 2026...)

  // üìä Ï†ÑÏ≤¥ Ìú¥Í∞Ä ÌòÑÌô©
  totalLeaves: Number, // Ï¥ù Ïó∞Ï∞® ÏùºÏàò (Í∏∞Î≥∏ 15Ïùº)
  usedLeaves: Number, // ÏÇ¨Ïö©Ìïú Ïó∞Ï∞® ÏùºÏàò
  remainingLeaves: Number, // ÏûîÏó¨ Ïó∞Ï∞® ÏùºÏàò

  // üè∑Ô∏è Ìú¥Í∞Ä ÌÉÄÏûÖÎ≥Ñ ÏÉÅÏÑ∏ ÌòÑÌô©
  leavesByType: {
    ANNUAL: {
      total: Number, // Î∞∞Ï†ïÎêú Ïó∞Ï∞® (15Ïùº)
      used: Number, // ÏÇ¨Ïö©Ìïú Ïó∞Ï∞®
      remaining: Number, // ÏûîÏó¨ Ïó∞Ï∞®
    },
    MONTHLY: {
      total: Number, // ÏõîÏ∞® Ï¥ùÎüâ (12Ïùº)
      used: Number, // ÏÇ¨Ïö©Ìïú ÏõîÏ∞®
      remaining: Number, // ÏûîÏó¨ ÏõîÏ∞®
      monthlyAllocation: [
        {
          // ÏõîÎ≥Ñ ÏßÄÍ∏â ÎÇ¥Ïó≠
          month: Number, // Ïõî (1-12)
          allocated: Number, // ÏßÄÍ∏âÎêú ÏùºÏàò
          allocatedAt: Date, // ÏßÄÍ∏â ÎÇ†Ïßú
        },
      ],
    },
    SICK: {
      total: Number, // Î≥ëÍ∞Ä ÌïúÎèÑ (10Ïùº)
      used: Number, // ÏÇ¨Ïö©Ìïú Î≥ëÍ∞Ä
      remaining: Number, // ÏûîÏó¨ Î≥ëÍ∞Ä
    },
  },

  // üìã Ìú¥Í∞Ä ÏÇ¨Ïö© ÎÇ¥Ïó≠
  leaveHistory: [
    {
      id: String, // Ìú¥Í∞Ä Í∏∞Î°ù Í≥†Ïú† ID
      date: Date, // Ïã†Ï≤≠/ÏÇ¨Ïö© ÎÇ†Ïßú
      leaveType: String, // Ìú¥Í∞Ä ÌÉÄÏûÖ (ANNUAL, MONTHLY, etc.)
      typeName: String, // Ìú¥Í∞Ä ÌÉÄÏûÖ ÌïúÍ∏ÄÎ™Ö (Ïó∞Ï∞®, ÏõîÏ∞®, etc.)
      emoji: String, // Ìú¥Í∞Ä ÌÉÄÏûÖ Ïù¥Î™®ÏßÄ

      // üìè ÏÇ¨Ïö©Îüâ Ï†ïÎ≥¥
      requestedDays: Number, // Ïã†Ï≤≠Ìïú ÏùºÏàò (1, 0.5, 0.25)
      deductedDays: Number, // Ïã§Ï†ú Ï∞®Í∞êÎêú ÏùºÏàò (Î≥ëÍ∞ÄÎäî 0)

      // ‚è∞ ÏãúÍ∞Ñ Ï†ïÎ≥¥
      timeRange: String, // ÏãúÍ∞ÑÎåÄ (09:00-18:00, etc.)
      timeType: String, // ÏãúÍ∞Ñ Íµ¨Î∂Ñ (Ï†ÑÏùº, Ïò§Ï†Ñ, Ïò§ÌõÑ, etc.)

      // üìù Ïã†Ï≤≠ Ï†ïÎ≥¥
      reason: String, // Ìú¥Í∞Ä ÏÇ¨Ïú†
      status: String, // ÏÉÅÌÉú (APPROVED, PENDING, REJECTED)

      // üìä Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
      createdAt: Date, // Ïã†Ï≤≠ ÏùºÏãú
      approvedAt: Date, // ÏäπÏù∏ ÏùºÏãú
      approvedBy: String, // ÏäπÏù∏Ïûê (ÏûêÎèôÏäπÏù∏: "SYSTEM")

      // üè• Î≥ëÍ∞Ä ÌäπÏàò ÌïÑÎìú
      medicalCertificate: Boolean, // ÏßÑÎã®ÏÑú Ï≤®Î∂Ä Ïó¨Î∂Ä
      doctorNote: String, // ÏùòÏÇ¨ ÏÜåÍ≤¨

      // üîÑ ÏàòÏ†ï/Ï∑®ÏÜå Ïù¥Î†•
      modifiedAt: Date, // ÎßàÏßÄÎßâ ÏàòÏ†ï ÏùºÏãú
      cancelledAt: Date, // Ï∑®ÏÜå ÏùºÏãú
      cancelReason: String, // Ï∑®ÏÜå ÏÇ¨Ïú†
    },
  ],

  // ‚öôÔ∏è ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï
  settings: {
    autoApproval: Boolean, // ÏûêÎèô ÏäπÏù∏ Ïó¨Î∂Ä
    notificationEnabled: Boolean, // ÏïåÎ¶º ÌôúÏÑ±Ìôî
    preferredLeaveType: String, // ÏÑ†Ìò∏ Ìú¥Í∞Ä ÌÉÄÏûÖ
    workSchedule: {
      startTime: String, // Í∑ºÎ¨¥ ÏãúÏûë ÏãúÍ∞Ñ (09:00)
      endTime: String, // Í∑ºÎ¨¥ Ï¢ÖÎ£å ÏãúÍ∞Ñ (18:00)
      lunchStart: String, // Ï†êÏã¨ ÏãúÏûë (12:00)
      lunchEnd: String, // Ï†êÏã¨ Ï¢ÖÎ£å (13:00)
    },
  },

  // üìä ÌÜµÍ≥Ñ Ï†ïÎ≥¥ (Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞)
  statistics: {
    thisMonth: {
      used: Number, // Ïù¥Î≤à Îã¨ ÏÇ¨Ïö©Îüâ
      mostUsedType: String, // Í∞ÄÏû• ÎßéÏù¥ ÏÇ¨Ïö©Ìïú ÌÉÄÏûÖ
    },
    lastMonth: {
      used: Number,
      mostUsedType: String,
    },
    totalUsageByType: {
      // Ï†ÑÏ≤¥ ÌÉÄÏûÖÎ≥Ñ ÏÇ¨Ïö©Îüâ
      ANNUAL: Number,
      MONTHLY: Number,
      HALF_DAY: Number,
      QUARTER_DAY: Number,
      SICK: Number,
    },
    averageUsagePerMonth: Number, // ÏõîÌèâÍ∑† ÏÇ¨Ïö©Îüâ
    lastCalculatedAt: Date, // ÎßàÏßÄÎßâ Í≥ÑÏÇ∞ ÏùºÏãú
  },

  // üïí ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ
  createdAt: Date, // Í≥ÑÏ†ï ÏÉùÏÑ±Ïùº
  updatedAt: Date, // ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏
  lastAccessAt: Date, // ÎßàÏßÄÎßâ Ï†ëÍ∑ºÏùº
};

/**
 * üîç Ïù∏Îç±Ïä§ ÏÑ§Ï†ï
 */
const LeaveIndexes = [
  // Í∏∞Î≥∏ Ïù∏Îç±Ïä§
  { userKey: 1 }, // Ïú†ÎãàÌÅ¨ Ïù∏Îç±Ïä§
  { userId: 1, year: 1 }, // ÏÇ¨Ïö©ÏûêÎ≥Ñ Ïó∞ÎèÑ Ï°∞Ìöå

  // ÏÑ±Îä• ÏµúÏ†ÅÌôî Ïù∏Îç±Ïä§
  { "leaveHistory.date": -1 }, // ÎÇ†ÏßúÎ≥Ñ ÎÇ¥Ïó≠ Ï°∞Ìöå
  { "leaveHistory.leaveType": 1 }, // ÌÉÄÏûÖÎ≥Ñ ÎÇ¥Ïó≠ Ï°∞Ìöå
  { "leaveHistory.status": 1 }, // ÏÉÅÌÉúÎ≥Ñ Ï°∞Ìöå

  // ÌÜµÍ≥Ñ Ïù∏Îç±Ïä§
  { "statistics.lastCalculatedAt": 1 }, // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞Ïö©
  { updatedAt: -1 }, // ÏµúÏã† ÏóÖÎç∞Ïù¥Ìä∏ Ï°∞Ìöå

  // Î≥µÌï© Ïù∏Îç±Ïä§
  { userId: 1, "leaveHistory.date": -1 }, // ÏÇ¨Ïö©ÏûêÎ≥Ñ ÏµúÏã† ÎÇ¥Ïó≠
  { year: 1, "statistics.thisMonth.used": -1 }, // Ïó∞ÎèÑÎ≥Ñ ÏÇ¨Ïö©Îüâ ÏàúÏúÑ
];

/**
 * üéØ Ìú¥Í∞Ä ÌÉÄÏûÖ Ï†ïÏùò (ÏÉÅÏàò)
 */
const LeaveTypes = {
  ANNUAL: {
    code: "ANNUAL",
    name: "Ïó∞Ï∞®",
    emoji: "üèñÔ∏è",
    allowedDays: [1, 0.5, 0.25],
    deductionRate: 1.0,
    requiresApproval: false,
    description: "1ÎÖÑÍ∞Ñ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Ïú†Í∏âÌú¥Í∞Ä",
  },
  MONTHLY: {
    code: "MONTHLY",
    name: "ÏõîÏ∞®",
    emoji: "üìÖ",
    allowedDays: [1, 0.5, 0.25],
    deductionRate: 1.0,
    requiresApproval: false,
    description: "Îß§Ïõî 1ÏùºÏî© ÏûêÎèô ÏßÄÍ∏âÎêòÎäî Ìú¥Í∞Ä",
  },
  HALF_DAY: {
    code: "HALF_DAY",
    name: "Î∞òÏ∞®",
    emoji: "üåÖ",
    allowedDays: [0.5],
    deductionRate: 0.5,
    requiresApproval: false,
    description: "Î∞òÎÇòÏ†à Ìú¥Í∞Ä (Ïò§Ï†Ñ/Ïò§ÌõÑ)",
  },
  QUARTER_DAY: {
    code: "QUARTER_DAY",
    name: "Î∞òÎ∞òÏ∞®",
    emoji: "‚è∞",
    allowedDays: [0.25],
    deductionRate: 0.25,
    requiresApproval: false,
    description: "2ÏãúÍ∞Ñ Îã®ÏúÑ Ìú¥Í∞Ä",
  },
  SICK: {
    code: "SICK",
    name: "Î≥ëÍ∞Ä",
    emoji: "ü§í",
    allowedDays: [1, 0.5, 0.25],
    deductionRate: 0, // Ï∞®Í∞ê ÏóÜÏùå
    requiresApproval: true,
    description: "ÏßàÎ≥ëÏúºÎ°ú Ïù∏Ìïú Ìú¥Í∞Ä (Ïó∞Ï∞® Ï∞®Í∞ê ÏóÜÏùå)",
  },
};

/**
 * ‚è∞ ÏÇ¨Ïö© Îã®ÏúÑ Ï†ïÏùò
 */
const UsageUnits = {
  1: {
    name: "1Ïùº",
    display: "ÌïòÎ£®Ï¢ÖÏùº",
    timeRange: "09:00-18:00",
    hours: 8,
    description: "Ï†ÑÏùº Ìú¥Í∞Ä",
  },
  0.5: {
    name: "0.5Ïùº",
    display: "Î∞òÎÇòÏ†à",
    timeRange: "09:00-13:00 ÎòêÎäî 14:00-18:00",
    hours: 4,
    description: "Î∞òÏùº Ìú¥Í∞Ä",
    options: [
      { type: "morning", range: "09:00-13:00", name: "Ïò§Ï†ÑÎ∞òÏ∞®" },
      { type: "afternoon", range: "14:00-18:00", name: "Ïò§ÌõÑÎ∞òÏ∞®" },
    ],
  },
  0.25: {
    name: "0.25Ïùº",
    display: "Î∞òÎ∞òÎÇòÏ†à",
    timeRange: "09:00-11:00 ÎòêÎäî 16:00-18:00",
    hours: 2,
    description: "2ÏãúÍ∞Ñ Ìú¥Í∞Ä",
    options: [
      { type: "early_morning", range: "09:00-11:00", name: "Ï∂úÍ∑ºÌõÑÎ∞òÎ∞òÏ∞®" },
      { type: "late_afternoon", range: "16:00-18:00", name: "Ìá¥Í∑ºÏ†ÑÎ∞òÎ∞òÏ∞®" },
    ],
  },
};

/**
 * üìä Ìú¥Í∞Ä ÏÉÅÌÉú Ï†ïÏùò
 */
const LeaveStatus = {
  PENDING: {
    code: "PENDING",
    name: "ÎåÄÍ∏∞Ï§ë",
    emoji: "‚è≥",
    description: "ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ë",
  },
  APPROVED: {
    code: "APPROVED",
    name: "ÏäπÏù∏Îê®",
    emoji: "‚úÖ",
    description: "ÏäπÏù∏ÎêòÏñ¥ ÏÇ¨Ïö© Í∞ÄÎä•",
  },
  REJECTED: {
    code: "REJECTED",
    name: "Í±∞Ï†àÎê®",
    emoji: "‚ùå",
    description: "ÏäπÏù∏ Í±∞Ï†àÎê®",
  },
  CANCELLED: {
    code: "CANCELLED",
    name: "Ï∑®ÏÜåÎê®",
    emoji: "üö´",
    description: "ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∑®ÏÜåÌï®",
  },
  USED: {
    code: "USED",
    name: "ÏÇ¨Ïö©ÏôÑÎ£å",
    emoji: "‚ú®",
    description: "Ìú¥Í∞Ä ÏÇ¨Ïö© ÏôÑÎ£å",
  },
};

/**
 * üéØ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Í∑úÏπô
 */
const ValidationRules = {
  // ÏÇ¨Ïö©Ïûê ID Í≤ÄÏ¶ù
  userId: {
    required: true,
    type: "number",
    min: 1,
    max: 2147483647,
  },

  // Ìú¥Í∞Ä ÏùºÏàò Í≤ÄÏ¶ù
  days: {
    required: true,
    type: "number",
    allowedValues: [0.25, 0.5, 1],
    custom: (value, leaveType) => {
      const typeConfig = LeaveTypes[leaveType];
      return typeConfig && typeConfig.allowedDays.includes(value);
    },
  },

  // Ìú¥Í∞Ä ÌÉÄÏûÖ Í≤ÄÏ¶ù
  leaveType: {
    required: true,
    type: "string",
    allowedValues: Object.keys(LeaveTypes),
  },

  // ÏÇ¨Ïú† Í≤ÄÏ¶ù
  reason: {
    required: false,
    type: "string",
    maxLength: 100,
    trim: true,
  },
};

/**
 * üõ†Ô∏è Ïä§ÌÇ§Îßà Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
 */
const SchemaUtils = {
  // Í∏∞Î≥∏ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  createDefaultUserData(userId, year = new Date().getFullYear()) {
    return {
      userKey: `${userId}_${year}`,
      userId,
      year,
      totalLeaves: 15,
      usedLeaves: 0,
      remainingLeaves: 15,
      leavesByType: {
        ANNUAL: { total: 15, used: 0, remaining: 15 },
        MONTHLY: {
          total: 12,
          used: 0,
          remaining: 12,
          monthlyAllocation: [],
        },
        SICK: { total: 10, used: 0, remaining: 10 },
      },
      leaveHistory: [],
      settings: {
        autoApproval: true,
        notificationEnabled: true,
        preferredLeaveType: "ANNUAL",
        workSchedule: {
          startTime: "09:00",
          endTime: "18:00",
          lunchStart: "12:00",
          lunchEnd: "13:00",
        },
      },
      statistics: {
        thisMonth: { used: 0, mostUsedType: null },
        lastMonth: { used: 0, mostUsedType: null },
        totalUsageByType: {
          ANNUAL: 0,
          MONTHLY: 0,
          HALF_DAY: 0,
          QUARTER_DAY: 0,
          SICK: 0,
        },
        averageUsagePerMonth: 0,
        lastCalculatedAt: new Date(),
      },
      createdAt: new Date(),
      updatedAt: new Date(),
      lastAccessAt: new Date(),
    };
  },

  // Ìú¥Í∞Ä Í∏∞Î°ù ÏÉùÏÑ±
  createLeaveRecord(leaveType, days, reason = "") {
    const typeConfig = LeaveTypes[leaveType];
    const unitConfig = UsageUnits[days];

    return {
      id: `leave_${Date.now()}_${Math.floor(Math.random() * 1000)}`,
      date: new Date(),
      leaveType,
      typeName: typeConfig.name,
      emoji: typeConfig.emoji,
      requestedDays: days,
      deductedDays: days * typeConfig.deductionRate,
      timeRange: unitConfig.timeRange,
      timeType: unitConfig.display,
      reason: reason.trim(),
      status: typeConfig.requiresApproval ? "PENDING" : "APPROVED",
      createdAt: new Date(),
      approvedAt: typeConfig.requiresApproval ? null : new Date(),
      approvedBy: typeConfig.requiresApproval ? null : "SYSTEM",
      medicalCertificate: leaveType === "SICK" ? false : undefined,
      doctorNote: leaveType === "SICK" ? "" : undefined,
    };
  },

  // Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
  validateLeaveRequest(userId, leaveType, days, reason) {
    const errors = [];

    // ÏÇ¨Ïö©Ïûê ID Í≤ÄÏ¶ù
    if (
      !ValidationRules.userId.custom ||
      !ValidationRules.userId.custom(userId)
    ) {
      errors.push("Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê IDÏûÖÎãàÎã§.");
    }

    // Ìú¥Í∞Ä ÌÉÄÏûÖ Í≤ÄÏ¶ù
    if (!ValidationRules.leaveType.allowedValues.includes(leaveType)) {
      errors.push("ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Ìú¥Í∞Ä ÌÉÄÏûÖÏûÖÎãàÎã§.");
    }

    // ÏùºÏàò Í≤ÄÏ¶ù
    if (!ValidationRules.days.allowedValues.includes(days)) {
      errors.push("ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Ìú¥Í∞Ä ÏùºÏàòÏûÖÎãàÎã§.");
    }

    // ÌÉÄÏûÖÎ≥Ñ ÏùºÏàò Ìò∏ÌôòÏÑ± Í≤ÄÏ¶ù
    if (leaveType && days) {
      const typeConfig = LeaveTypes[leaveType];
      if (typeConfig && !typeConfig.allowedDays.includes(days)) {
        errors.push(
          `${typeConfig.name}ÏùÄ ${typeConfig.allowedDays.join(
            ", "
          )}ÏùºÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.`
        );
      }
    }

    // ÏÇ¨Ïú† Í≤ÄÏ¶ù
    if (reason && reason.length > ValidationRules.reason.maxLength) {
      errors.push(
        `ÏÇ¨Ïú†Îäî ${ValidationRules.reason.maxLength}Ïûê Ïù¥ÎÇ¥Î°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.`
      );
    }

    return {
      valid: errors.length === 0,
      errors,
    };
  },
};

module.exports = {
  LeaveUserSchema,
  LeaveIndexes,
  LeaveTypes,
  UsageUnits,
  LeaveStatus,
  ValidationRules,
  SchemaUtils,
};
