// src/handlers/CommandHandler.js - ÌëúÏ§ÄÌôîÎêú Î™ÖÎ†πÏñ¥ Ìï∏Îì§Îü¨ v3.0.1
// Railway ÌôòÍ≤Ω, Î¶¨Ìå©ÌÜ†ÎßÅ ÌëúÏ§Ä Ï§ÄÏàò, Îß§Í∞úÎ≥ÄÏàò ÌëúÏ§ÄÌôî

const Logger = require("../utils/Logger");
const botCommandsRegistry = require("../config/BotCommandsRegistry");
const { getUserName } = require("../utils/UserHelper");
const config = require("../config/config");

class CommandHandler {
  constructor(bot, dependencies = {}) {
    this.bot = bot;

    // ‚úÖ ÌëúÏ§ÄÌôîÎêú ÏùòÏ°¥ÏÑ± Ï£ºÏûÖ (Îß§Í∞úÎ≥ÄÏàò ÌëúÏ§Ä)
    this.moduleManager = dependencies.moduleManager;
    this.menuManager = dependencies.menuManager;
    this.userStates = dependencies.userStates || new Map();
    this.errorHandler = dependencies.errorHandler;

    // üìã Î™ÖÎ†πÏñ¥ Î†àÏßÄÏä§Ìä∏Î¶¨ Ïó∞Í≤∞
    this.commandRegistry = botCommandsRegistry;
    this.commandMapping = this.commandRegistry.getCommandMapping();

    // üìä Ìï∏Îì§Îü¨ ÌÜµÍ≥Ñ
    this.stats = {
      totalCommands: 0,
      successfulCommands: 0,
      failedCommands: 0,
      unknownCommands: 0,
      moduleCommands: 0,
      systemCommands: 0,
      adminCommands: 0,
      lastReset: new Date(),
    };

    Logger.info("üéØ CommandHandler Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
    Logger.debug(`üìã Îì±Î°ùÎêú Î™ÖÎ†πÏñ¥: ${this.commandMapping.size}Í∞ú`);
  }

  // üöÄ BotFather Î™ÖÎ†πÏñ¥ ÏûêÎèô Îì±Î°ù
  async initializeBotCommands() {
    try {
      Logger.info("üöÄ BotFather Î™ÖÎ†πÏñ¥ Îì±Î°ù Ï§ë...");

      const success = await this.commandRegistry.setBotFatherCommands(this.bot);

      if (success) {
        Logger.success("‚úÖ BotFather Î™ÖÎ†πÏñ¥ Îì±Î°ù ÏôÑÎ£å");
        return true;
      } else {
        Logger.error("‚ùå BotFather Î™ÖÎ†πÏñ¥ Îì±Î°ù Ïã§Ìå®");
        return false;
      }
    } catch (error) {
      Logger.error("‚ùå BotFather Î™ÖÎ†πÏñ¥ Îì±Î°ù Ï§ë Ïò§Î•ò:", error);
      return false;
    }
  }

  // ‚≠ê Î©îÏù∏ Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ (ÌëúÏ§ÄÌôîÎêú Îß§Í∞úÎ≥ÄÏàò)
  async handle(msg) {
    try {
      // üîç Î©îÏãúÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
      if (!this.validateMessage(msg)) {
        return false;
      }

      const {
        text,
        chat: { id: chatId },
        from: { id: userId },
      } = msg;
      const userName = getUserName(msg.from);

      // Î™ÖÎ†πÏñ¥Í∞Ä ÏïÑÎãå Í≤ΩÏö∞ Ï°∞Í∏∞ Î∞òÌôò
      if (!text.startsWith("/")) {
        Logger.debug("Î™ÖÎ†πÏñ¥Í∞Ä ÏïÑÎãå Î©îÏãúÏßÄ, Í±¥ÎÑàÎõ∞Í∏∞");
        return false;
      }

      // üìù Î™ÖÎ†πÏñ¥ ÌååÏã±
      const { command, args, cleanCommand } = this.parseCommand(text);

      this.stats.totalCommands++;

      Logger.info(`üéØ Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨: /${cleanCommand}`, {
        userId,
        userName,
        args: args.length,
        fullCommand: text,
      });

      // üîç Î™ÖÎ†πÏñ¥ Îß§Ìïë Í≤ÄÏÉâ
      const commandConfig = this.commandMapping.get(`/${cleanCommand}`);

      if (commandConfig) {
        // ‚úÖ Îì±Î°ùÎêú Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨
        return await this.executeCommand(
          msg,
          commandConfig,
          cleanCommand,
          args
        );
      } else {
        // ‚ùå Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†πÏñ¥
        return await this.handleUnknownCommand(msg, cleanCommand);
      }
    } catch (error) {
      this.stats.failedCommands++;
      Logger.error("CommandHandler Ï≤òÎ¶¨ Ïò§Î•ò:", error);

      if (this.errorHandler) {
        await this.errorHandler.handleError(error, {
          module: "CommandHandler",
          context: "handle",
          userId: msg?.from?.id,
        });
      }

      await this.sendErrorMessage(msg.chat.id, error);
      return false;
    }
  }

  // üîç Î©îÏãúÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
  validateMessage(msg) {
    if (!msg) {
      Logger.warn("Î©îÏãúÏßÄÍ∞Ä null/undefined");
      return false;
    }

    if (!msg.text || typeof msg.text !== "string") {
      Logger.debug("ÌÖçÏä§Ìä∏Í∞Ä ÏóÜÎäî Î©îÏãúÏßÄ");
      return false;
    }

    if (!msg.chat || !msg.from) {
      Logger.warn("Ï±ÑÌåÖ ÎòêÎäî ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Î©îÏãúÏßÄ");
      return false;
    }

    return true;
  }

  // üìù Î™ÖÎ†πÏñ¥ ÌååÏã± (ÏïàÏ†ÑÌïòÍ≥† Ï†ïÌôïÌïòÍ≤å)
  parseCommand(text) {
    // Í≥µÎ∞±ÏúºÎ°ú Î∂ÑÎ¶¨ÌïòÎêò Îπà Î¨∏ÏûêÏó¥ Ï†úÍ±∞
    const parts = text.trim().split(/\s+/).filter(Boolean);

    if (parts.length === 0) {
      throw new Error("Îπà Î™ÖÎ†πÏñ¥");
    }

    const commandWithSlash = parts[0];
    const rawCommand = commandWithSlash.substring(1); // '/' Ï†úÍ±∞
    const args = parts.slice(1);

    // Î¥á Î©òÏÖò Ï†úÍ±∞ (Í∑∏Î£π Ï±ÑÌåÖÏö©: /start@mybotname ‚Üí start)
    const cleanCommand = rawCommand.replace(/@\w+$/, "");

    return {
      command: rawCommand,
      cleanCommand,
      args,
      fullText: text,
    };
  }

  // ‚ö° Î™ÖÎ†πÏñ¥ Ïã§Ìñâ (ÌëúÏ§ÄÌôîÎêú Î∞©Ïãù)
  async executeCommand(msg, commandConfig, command, args) {
    try {
      const { category, isAdmin, module: moduleName } = commandConfig;
      const {
        chat: { id: chatId },
        from: { id: userId },
      } = msg;
      const userName = getUserName(msg.from);

      // üîí Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
      if (isAdmin && !(await this.checkAdminPermission(userId))) {
        await this.bot.sendMessage(chatId, "‚ùå Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
        this.stats.failedCommands++;
        return false;
      }

      // üìä ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
      if (category === "system") {
        this.stats.systemCommands++;
      } else if (isAdmin) {
        this.stats.adminCommands++;
      } else {
        this.stats.moduleCommands++;
      }

      // üéØ Î™ÖÎ†πÏñ¥ ÌÉÄÏûÖÎ≥Ñ Ï≤òÎ¶¨
      if (category === "system") {
        return await this.handleSystemCommand(msg, command, args);
      } else if (moduleName) {
        return await this.handleModuleCommand(
          msg,
          commandConfig,
          command,
          args
        );
      } else {
        Logger.warn(`Ï†ïÏùòÎêòÏßÄ ÏïäÏùÄ Î™ÖÎ†πÏñ¥ ÌÉÄÏûÖ: ${command}`);
        return false;
      }
    } catch (error) {
      this.stats.failedCommands++;
      Logger.error(`Î™ÖÎ†πÏñ¥ Ïã§Ìñâ Ïò§Î•ò [${command}]:`, error);
      throw error;
    }
  }

  // üèõÔ∏è ÏãúÏä§ÌÖú Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨
  async handleSystemCommand(msg, command, args) {
    const {
      chat: { id: chatId },
      from: { id: userId },
    } = msg;
    const userName = getUserName(msg.from);

    try {
      switch (command) {
        case "start":
          return await this.handleStart(msg, command, args);

        case "help":
          return await this.handleHelp(msg, command, args);

        case "status":
          return await this.handleStatus(msg, command, args);

        case "cancel":
          return await this.handleCancel(msg, command, args);

        default:
          Logger.warn(`Ï†ïÏùòÎêòÏßÄ ÏïäÏùÄ ÏãúÏä§ÌÖú Î™ÖÎ†πÏñ¥: ${command}`);
          return false;
      }
    } catch (error) {
      Logger.error(`ÏãúÏä§ÌÖú Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ïò§Î•ò [${command}]:`, error);
      throw error;
    }
  }

  // üì¶ Î™®Îìà Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ (ÌëúÏ§ÄÌôîÎêú Îß§Í∞úÎ≥ÄÏàò Ï†ÑÎã¨)
  async handleModuleCommand(msg, commandConfig, command, args) {
    try {
      if (!this.moduleManager) {
        Logger.error("ModuleManagerÍ∞Ä ÏóÜÏñ¥ÏÑú Î™®Îìà Î™ÖÎ†πÏñ¥Î•º Ï≤òÎ¶¨Ìï† Ïàò ÏóÜÏùå");
        return false;
      }

      const { module: moduleName } = commandConfig;

      // ‚úÖ ÌëúÏ§ÄÌôîÎêú Îß§Í∞úÎ≥ÄÏàòÎ°ú Î™®ÎìàÏóê Ï†ÑÎã¨
      const handled = await this.moduleManager.handleCommand(
        this.bot, // bot
        msg, // message (callbackQuery ÎåÄÏã†)
        command, // subAction
        args, // params
        this.menuManager // menuManager
      );

      if (handled) {
        this.stats.successfulCommands++;
        Logger.debug(`Î™®Îìà Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ ÏôÑÎ£å: ${moduleName}.${command}`);
        return true;
      } else {
        Logger.warn(`Î™®ÎìàÏóêÏÑú Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùå: ${moduleName}.${command}`);
        return false;
      }
    } catch (error) {
      Logger.error(`Î™®Îìà Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ïò§Î•ò [${command}]:`, error);
      throw error;
    }
  }

  // =============== ÏãúÏä§ÌÖú Î™ÖÎ†πÏñ¥ Ìï∏Îì§Îü¨Îì§ ===============

  async handleStart(msg, command, args) {
    const {
      chat: { id: chatId },
      from: { id: userId },
    } = msg;
    const userName = getUserName(msg.from);

    try {
      // ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      this.userStates.delete(userId);

      // Îî•ÎßÅÌÅ¨ Ï≤òÎ¶¨
      if (args && args.length > 0) {
        return await this.handleDeepLink(msg, args[0]);
      }

      // ÌôòÏòÅ Î©îÏãúÏßÄ
      const welcomeText = `ÏïàÎÖïÌïòÏÑ∏Ïöî ${userName}Îãò! üëã\n\nü§ñ **${config.bot.name} v${config.bot.version}**Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.\n\nÏïÑÎûò Î©îÎâ¥ÏóêÏÑú ÏõêÌïòÎäî Í∏∞Îä•ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.`;

      // Î©îÏù∏ Î©îÎâ¥ ÌÇ§Î≥¥Îìú ÏÉùÏÑ±
      const keyboard = this.createMainMenuKeyboard();

      await this.bot.sendMessage(chatId, welcomeText, {
        reply_markup: keyboard,
        parse_mode: "Markdown",
      });

      this.stats.successfulCommands++;
      Logger.info(`Start Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ ÏôÑÎ£å: ${userName} (${userId})`);
      return true;
    } catch (error) {
      Logger.error("Start Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ïò§Î•ò:", error);

      // Ìè¥Î∞± ÏùëÎãµ
      await this.bot.sendMessage(
        chatId,
        "Î¥áÏùÑ ÏãúÏûëÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
      );
      return false;
    }
  }

  async handleHelp(msg, command, args) {
    const {
      chat: { id: chatId },
    } = msg;

    try {
      // ÌäπÏ†ï Î™®ÎìàÏùò ÎèÑÏõÄÎßê ÏöîÏ≤≠ Ïãú
      if (args && args.length > 0) {
        const moduleName = args[0];

        if (this.moduleManager) {
          const moduleHelp = await this.moduleManager.getModuleHelp(moduleName);

          if (moduleHelp) {
            await this.bot.sendMessage(chatId, moduleHelp, {
              parse_mode: "Markdown",
            });
            this.stats.successfulCommands++;
            return true;
          }
        }
      }

      // Ï†ÑÏ≤¥ ÎèÑÏõÄÎßê
      const helpText = this.generateHelpText();

      await this.bot.sendMessage(chatId, helpText, {
        parse_mode: "Markdown",
        disable_web_page_preview: true,
      });

      this.stats.successfulCommands++;
      return true;
    } catch (error) {
      Logger.error("Help Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ïò§Î•ò:", error);

      // Markdown ÌååÏã± Ïò§Î•ò Ïãú ÏùºÎ∞ò ÌÖçÏä§Ìä∏Î°ú Ïû¨ÏãúÎèÑ
      try {
        const simpleHelp = this.generateSimpleHelpText();
        await this.bot.sendMessage(chatId, simpleHelp);
        return true;
      } catch (fallbackError) {
        Logger.error("Ìè¥Î∞± ÎèÑÏõÄÎßêÎèÑ Ïã§Ìå®:", fallbackError);
        return false;
      }
    }
  }

  async handleStatus(msg, command, args) {
    const {
      chat: { id: chatId },
      from: { id: userId },
    } = msg;

    try {
      const statusText = await this.generateStatusText(userId);

      await this.bot.sendMessage(chatId, statusText, {
        parse_mode: "Markdown",
      });

      this.stats.successfulCommands++;
      return true;
    } catch (error) {
      Logger.error("Status Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
      return false;
    }
  }

  async handleCancel(msg, command, args) {
    const {
      chat: { id: chatId },
      from: { id: userId },
    } = msg;

    try {
      const userState = this.userStates.get(userId);

      if (!userState) {
        await this.bot.sendMessage(chatId, "Ï∑®ÏÜåÌï† ÏûëÏóÖÏù¥ ÏóÜÏäµÎãàÎã§.");
        this.stats.successfulCommands++;
        return true;
      }

      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      this.userStates.delete(userId);

      // Î™®ÎìàÏóê Ï∑®ÏÜå ÏïåÎ¶º
      if (userState.moduleId && this.moduleManager) {
        await this.moduleManager.cancelModuleAction(userId, userState.moduleId);
      }

      await this.bot.sendMessage(chatId, "ÏûëÏóÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.", {
        reply_markup: { remove_keyboard: true },
      });

      this.stats.successfulCommands++;
      return true;
    } catch (error) {
      Logger.error("Cancel Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
      return false;
    }
  }

  // =============== Ìó¨Ìçº Î©îÏÑúÎìúÎì§ ===============

  async handleUnknownCommand(msg, command) {
    const {
      chat: { id: chatId },
    } = msg;

    try {
      this.stats.unknownCommands++;

      await this.bot.sendMessage(
        chatId,
        `‚ùì '/${command}'Îäî Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†πÏñ¥ÏûÖÎãàÎã§.\n\n/help Î•º ÏûÖÎ†•ÌïòÏó¨ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™ÖÎ†πÏñ¥Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.`
      );

      return false;
    } catch (error) {
      Logger.error("Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
      return false;
    }
  }

  async handleDeepLink(msg, param) {
    const {
      chat: { id: chatId },
    } = msg;

    try {
      const [action, ...data] = param.split("_");

      switch (action) {
        case "module":
          if (this.moduleManager && data[0]) {
            await this.moduleManager.activateModule(chatId, data[0]);
            return true;
          }
          break;

        case "share":
          await this.handleShareLink(msg, data);
          return true;

        default:
          Logger.warn(`Ïïå Ïàò ÏóÜÎäî Îî•ÎßÅÌÅ¨: ${param}`);
      }

      return false;
    } catch (error) {
      Logger.error("Îî•ÎßÅÌÅ¨ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
      return false;
    }
  }

  async checkAdminPermission(userId) {
    try {
      // ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Í¥ÄÎ¶¨Ïûê ID ÌôïÏù∏
      const adminIds =
        process.env.ADMIN_IDS?.split(",") ||
        process.env.ADMIN_USER_IDS?.split(",") ||
        [];

      return adminIds.includes(userId.toString());
    } catch (error) {
      Logger.error("Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏ Ïò§Î•ò:", error);
      return false;
    }
  }

  createMainMenuKeyboard() {
    return {
      inline_keyboard: [
        [{ text: "üì± Î™®Îìà ÏÑ†ÌÉù", callback_data: "module:list" }],
        [
          { text: "üìù Ìï†Ïùº", callback_data: "todo:menu" },
          { text: "üîÆ Ïö¥ÏÑ∏", callback_data: "fortune:menu" },
        ],
        [
          { text: "üå§Ô∏è ÎÇ†Ïî®", callback_data: "weather:menu" },
          { text: "‚è∞ ÌÉÄÏù¥Î®∏", callback_data: "timer:menu" },
        ],
        [
          { text: "üìÖ Ìú¥Í∞Ä", callback_data: "leave:menu" },
          { text: "üìä Ïù∏ÏÇ¨Ïù¥Ìä∏", callback_data: "insight:menu" },
        ],
        [
          { text: "üõ†Ô∏è Ïú†Ìã∏", callback_data: "utils:menu" },
          { text: "üïê Í∑ºÎ¨¥ÏãúÍ∞Ñ", callback_data: "worktime:menu" },
        ],
        [
          { text: "‚öôÔ∏è ÏÑ§Ï†ï", callback_data: "settings:main" },
          { text: "‚ùì ÎèÑÏõÄÎßê", callback_data: "help:main" },
        ],
      ],
    };
  }

  generateHelpText() {
    const commands = this.commandRegistry.getBotFatherCommands();

    let helpText = `üìñ **${config.bot.name} ÎèÑÏõÄÎßê**\nÎ≤ÑÏ†Ñ: ${config.bot.version}\n\n`;

    helpText += "**Í∏∞Î≥∏ Î™ÖÎ†πÏñ¥:**\n";
    commands.forEach((cmd) => {
      helpText += `‚Ä¢ /${cmd.command} - ${cmd.description}\n`;
    });

    helpText += "\n**ÏÇ¨Ïö© ÌåÅ:**\n";
    helpText += "‚Ä¢ Í∞Å Î™®ÎìàÏùò ÏûêÏÑ∏Ìïú ÏÇ¨Ïö©Î≤ïÏùÄ Ìï¥Îãπ Î™®Îìà ÏÑ†ÌÉù ÌõÑ ÌôïÏù∏\n";
    helpText += "‚Ä¢ ÏûëÏóÖ Ï§ë /cancel Î°ú Ïñ∏Ï†úÎì† Ï∑®ÏÜå Í∞ÄÎä•\n";
    helpText += "‚Ä¢ /status Î°ú ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏ Í∞ÄÎä•\n\n";
    helpText += "**Î¨∏Ïùò:** @doomock\\_support";

    return helpText;
  }

  generateSimpleHelpText() {
    return `üìñ ${config.bot.name} ÎèÑÏõÄÎßê (v${config.bot.version})

Í∏∞Î≥∏ Î™ÖÎ†πÏñ¥:
‚Ä¢ /start - Î¥á ÏãúÏûë Î∞è Î©îÏù∏ Î©îÎâ¥
‚Ä¢ /help - ÎèÑÏõÄÎßê Î≥¥Í∏∞
‚Ä¢ /modules - ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îìà Î™©Î°ù
‚Ä¢ /status - Î¥á ÏÉÅÌÉú ÌôïÏù∏
‚Ä¢ /cancel - ÌòÑÏû¨ ÏûëÏóÖ Ï∑®ÏÜå

Î™®Îìà Î™ÖÎ†πÏñ¥:
‚Ä¢ /todo - Ìï†Ïùº Í¥ÄÎ¶¨
‚Ä¢ /fortune - Ïö¥ÏÑ∏ Î≥¥Í∏∞
‚Ä¢ /weather - ÎÇ†Ïî® Ï†ïÎ≥¥
‚Ä¢ /timer - ÌÉÄÏù¥Î®∏/Î¶¨ÎßàÏù∏Îçî
‚Ä¢ /leave - Ìú¥Í∞Ä Í¥ÄÎ¶¨
‚Ä¢ /utils - Ïú†Ìã∏Î¶¨Ìã∞ ÎèÑÍµ¨

Í∞Å Î™®ÎìàÏùò ÏûêÏÑ∏Ìïú ÏÇ¨Ïö©Î≤ïÏùÄ Ìï¥Îãπ Î™ÖÎ†πÏñ¥ ÏûÖÎ†• ÌõÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.`;
  }

  async generateStatusText(userId) {
    // ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú
    const userState = this.userStates.get(userId);
    const stateText = userState
      ? `ÌòÑÏû¨ ÏÉÅÌÉú: ${userState.waitingFor || "ÎåÄÍ∏∞ Ï§ë"}`
      : "ÌòÑÏû¨ ÏÉÅÌÉú: ÎåÄÍ∏∞ Ï§ë";

    // ÌôúÏÑ± Î™®Îìà
    const activeModule = this.moduleManager
      ? await this.moduleManager.getActiveModule(userId)
      : null;
    const moduleText = activeModule
      ? `ÌôúÏÑ± Î™®Îìà: ${activeModule.name}`
      : "ÌôúÏÑ± Î™®Îìà: ÏóÜÏùå";

    // ÏóÖÌÉÄÏûÑ Í≥ÑÏÇ∞
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);

    return `**${config.bot.name} ÏÉÅÌÉú Ï†ïÎ≥¥** üìä

${stateText}
${moduleText}

${config.emoji.version} Î≤ÑÏ†Ñ: ${config.bot.version}
‚è±Ô∏è ÏóÖÌÉÄÏûÑ: ${hours}ÏãúÍ∞Ñ ${minutes}Î∂Ñ
üåê ÌôòÍ≤Ω: ${process.env.NODE_ENV || "development"}
üíæ Î©îÎ™®Î¶¨: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB
üîß ÏÑúÎ≤Ñ: ${process.env.RAILWAY_ENVIRONMENT ? "Railway" : "Î°úÏª¨"}

üìä Î™ÖÎ†πÏñ¥ ÌÜµÍ≥Ñ:
‚Ä¢ Ï¥ù Ï≤òÎ¶¨: ${this.stats.totalCommands}
‚Ä¢ ÏÑ±Í≥µ: ${this.stats.successfulCommands}
‚Ä¢ Ïã§Ìå®: ${this.stats.failedCommands}`;
  }

  async sendErrorMessage(chatId, error) {
    try {
      const errorText =
        error?.userMessage ||
        "Î™ÖÎ†πÏñ¥ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.";

      await this.bot.sendMessage(chatId, `‚ùå ${errorText}`);
    } catch (sendError) {
      Logger.error("ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:", sendError);
    }
  }

  // üìä ÌÜµÍ≥Ñ Ï°∞Ìöå
  getStats() {
    return {
      ...this.stats,
      successRate:
        this.stats.totalCommands > 0
          ? Math.round(
              (this.stats.successfulCommands / this.stats.totalCommands) * 100
            )
          : 0,
    };
  }

  // üîÑ ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî
  resetStats() {
    this.stats = {
      totalCommands: 0,
      successfulCommands: 0,
      failedCommands: 0,
      unknownCommands: 0,
      moduleCommands: 0,
      systemCommands: 0,
      adminCommands: 0,
      lastReset: new Date(),
    };

    Logger.info("üìä CommandHandler ÌÜµÍ≥Ñ Ï¥àÍ∏∞ÌôîÎê®");
  }
}

module.exports = CommandHandler;
