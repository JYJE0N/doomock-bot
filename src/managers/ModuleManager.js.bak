// src/managers/ModuleManager.js - 통합된 단일 매니저 (리팩토링)

const logger = require("../utils/Logger");
const { getUserName } = require("../utils/UserHelper");
const TimeHelper = require("../utils/TimeHelper");

class ModuleManager {
  constructor(bot, options = {}) {
    this.bot = bot;
    this.db = options.dbManager || null;
    this.moduleInstances = new Map();
    this.isInitialized = false;

    // 중복 처리 방지
    this.processingCallbacks = new Set();

    // 모듈 레지스트리 (ModuleConfig.js 통합)
    this.moduleRegistry = {
      system: { class: "SystemModule", path: "../modules/SystemModule" },
      todo: { class: "TodoModule", path: "../modules/TodoModule" },
      timer: { class: "TimerModule", path: "../modules/TimerModule" },
      worktime: { class: "WorktimeModule", path: "../modules/WorktimeModule" },
      leave: { class: "LeaveModule", path: "../modules/LeaveModule" },
      reminder: { class: "ReminderModule", path: "../modules/ReminderModule" },
      fortune: { class: "FortuneModule", path: "../modules/FortuneModule" },
      weather: { class: "WeatherModule", path: "../modules/WeatherModule" },
      utils: { class: "UtilsModule", path: "../modules/UtilsModule" },
    };

    logger.info("🔧 ModuleManager 생성됨");
  }

  // 🎯 초기화
  async initialize() {
    if (this.isInitialized) {
      logger.warn("ModuleManager 이미 초기화됨");
      return;
    }

    try {
      logger.info("⚙️ ModuleManager 초기화 시작...");
      await this.loadModules();
      this.isInitialized = true;
      logger.success(
        `✅ ModuleManager 초기화 완료 (${this.moduleInstances.size}개 모듈)`
      );
    } catch (error) {
      logger.error("❌ ModuleManager 초기화 실패:", error);
      throw error;
    }
  }

  // 📦 모듈 로드
  async loadModules() {
    for (const [key, config] of Object.entries(this.moduleRegistry)) {
      try {
        const ModuleClass = require(config.path);
        const moduleInstance = new ModuleClass(this.bot, {
          dbManager: this.db,
          moduleManager: this,
        });

        // 모듈 초기화
        if (moduleInstance.initialize) {
          await moduleInstance.initialize();
        }

        this.moduleInstances.set(config.class, moduleInstance);
        logger.debug(`✅ ${config.class} 로드 완료`);
      } catch (error) {
        logger.error(`❌ ${config.class} 로드 실패:`, error.message);
      }
    }
  }

  // 🎯 메시지 핸들러
  async handleMessage(bot, msg) {
    if (!msg.text) return false;

    // 모든 모듈에게 메시지 전달 (우선순위 순)
    const moduleOrder = [
      "system",
      "todo",
      "leave",
      "worktime",
      "timer",
      "reminder",
      "fortune",
      "weather",
      "utils",
    ];

    for (const moduleName of moduleOrder) {
      const moduleClass = this.moduleRegistry[moduleName]?.class;
      const module = this.moduleInstances.get(moduleClass);

      if (module?.handleMessage) {
        try {
          const handled = await module.handleMessage(bot, msg);
          if (handled) {
            logger.debug(`📬 메시지가 ${moduleClass}에서 처리됨`);
            return true;
          }
        } catch (error) {
          logger.error(`❌ ${moduleClass} 메시지 처리 오류:`, error);
        }
      }
    }

    return false;
  }

  // 🎯 콜백 핸들러 (한 곳에서만 처리)
  async handleCallback(callbackQuery) {
    const callbackData = callbackQuery.data;
    const callbackKey = `${callbackQuery.from.id}-${callbackData}`;

    // 중복 처리 방지
    if (this.processingCallbacks.has(callbackKey)) {
      logger.debug("🔄 콜백 중복 처리 방지:", callbackKey);
      return false;
    }

    this.processingCallbacks.add(callbackKey);

    try {
      logger.info(`📨 콜백 데이터 수신: ${callbackData}`);

      // 콜백 데이터 파싱
      const [targetModule, ...actionParts] = callbackData.split(":");
      const subAction = actionParts.join(":") || "menu";

      // 특수 케이스 처리
      if (targetModule === "main") {
        return await this.handleMainMenu(callbackQuery);
      }

      if (targetModule === "help") {
        return await this.handleHelp(callbackQuery);
      }

      if (targetModule === "system" && subAction === "status") {
        return await this.handleSystemStatus(callbackQuery);
      }

      // 모듈 찾기
      const moduleClass = this.findModuleClass(targetModule);
      if (!moduleClass) {
        logger.warn(`⚠️ 알 수 없는 모듈: ${targetModule}`);
        return false;
      }

      const module = this.moduleInstances.get(moduleClass);
      if (!module) {
        logger.warn(`⚠️ 모듈을 찾을 수 없음: ${targetModule}`);
        return false;
      }

      // 모듈 콜백 호출
      if (module.handleCallback) {
        const result = await module.handleCallback(
          this.bot,
          callbackQuery,
          subAction,
          {},
          this // menuManager 대신 자기 자신 전달
        );
        return result;
      }

      return false;
    } catch (error) {
      logger.error("❌ 콜백 처리 오류:", error);
      throw error; // BotController에서 처리하도록 전파
    } finally {
      // 중복 방지 해제
      setTimeout(() => {
        this.processingCallbacks.delete(callbackKey);
      }, 1000);
    }
  }

  // 🏠 메인 메뉴
  async handleMainMenu(callbackQuery) {
    try {
      const userName = getUserName(callbackQuery.from);

      const menuText = `🏠 **메인 메뉴**

안녕하세요 ${userName}님!
무엇을 도와드릴까요?`;

      const keyboard = this.createMainMenuKeyboard();

      await this.bot.editMessageText(menuText, {
        chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });

      return true;
    } catch (error) {
      logger.error("❌ 메인 메뉴 처리 오류:", error);
      return false;
    }
  }

  // ❓ 도움말
  async handleHelp(callbackQuery) {
    try {
      const helpText = `❓ **도움말**

**기본 명령어:**
• /start - 봇 시작
• /help - 도움말 보기
• /menu - 메인 메뉴
• /status - 상태 확인

**주요 기능:**
📝 **할일 관리** - 작업 추가/완료/삭제
🔮 **운세** - 오늘의 운세 확인
🌤️ **날씨** - 실시간 날씨 정보
⏰ **타이머** - 시간 관리
📅 **휴가 관리** - 연차 관리
🕐 **근무시간** - 출퇴근 기록
🔔 **리마인더** - 알림 설정
🛠️ **유틸리티** - 편의기능`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: "📱 메인 메뉴", callback_data: "main:menu" },
            { text: "📊 봇 상태", callback_data: "system:status" },
          ],
        ],
      };

      await this.bot.editMessageText(helpText, {
        chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });

      return true;
    } catch (error) {
      logger.error("❌ 도움말 처리 오류:", error);
      return false;
    }
  }

  // 📊 시스템 상태
  async handleSystemStatus(callbackQuery) {
    try {
      const uptime = process.uptime();
      const memUsage = process.memoryUsage();

      const statusText = `📊 **시스템 상태**

**봇 정보:**
• 버전: v${process.env.npm_package_version || "3.0.1"}
• 환경: ${process.env.NODE_ENV || "development"}
• 가동 시간: ${this.formatUptime(uptime)}

**시스템 리소스:**
• 메모리 사용: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB
• 총 메모리: ${Math.round(memUsage.heapTotal / 1024 / 1024)}MB

**모듈 상태:**
• 총 모듈: ${this.moduleInstances.size}개
• 활성 콜백: ${this.processingCallbacks.size}개`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: "🔄 새로고침", callback_data: "system:status" },
            { text: "🔙 메인 메뉴", callback_data: "main:menu" },
          ],
        ],
      };

      await this.bot.editMessageText(statusText, {
        chat_id: callbackQuery.message.chat.id,
        message_id: callbackQuery.message.message_id,
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });

      return true;
    } catch (error) {
      logger.error("❌ 시스템 상태 처리 오류:", error);
      return false;
    }
  }

  // 🎨 메인 메뉴 키보드 생성
  createMainMenuKeyboard() {
    const menuItems = [];

    // 활성화된 모듈만 표시
    const moduleButtons = [
      { module: "TodoModule", text: "📝 할일 관리", callback: "todo:menu" },
      { module: "FortuneModule", text: "🔮 운세", callback: "fortune:menu" },
      { module: "WeatherModule", text: "🌤️ 날씨", callback: "weather:menu" },
      { module: "TimerModule", text: "⏰ 타이머", callback: "timer:menu" },
      { module: "UtilsModule", text: "🛠️ 유틸리티", callback: "utils:menu" },
      { module: "LeaveModule", text: "📅 휴가 관리", callback: "leave:menu" },
      {
        module: "WorktimeModule",
        text: "🕐 근무시간",
        callback: "worktime:menu",
      },
      {
        module: "ReminderModule",
        text: "🔔 리마인더",
        callback: "reminder:menu",
      },
    ];

    for (const btn of moduleButtons) {
      if (this.moduleInstances.has(btn.module)) {
        menuItems.push({ text: btn.text, callback_data: btn.callback });
      }
    }

    // 2열로 배치
    const keyboard = [];
    for (let i = 0; i < menuItems.length; i += 2) {
      const row = [menuItems[i]];
      if (i + 1 < menuItems.length) {
        row.push(menuItems[i + 1]);
      }
      keyboard.push(row);
    }

    // 시스템 메뉴 추가
    keyboard.push([
      { text: "📊 시스템 상태", callback_data: "system:status" },
      { text: "❓ 도움말", callback_data: "help" },
    ]);

    return { inline_keyboard: keyboard };
  }

  // 🔍 모듈 클래스 찾기
  findModuleClass(moduleName) {
    const config = this.moduleRegistry[moduleName];
    return config ? config.class : null;
  }

  // 🕐 시간 포맷
  formatUptime(seconds) {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);

    if (days > 0) {
      return `${days}일 ${hours}시간 ${minutes}분`;
    } else if (hours > 0) {
      return `${hours}시간 ${minutes}분`;
    } else {
      return `${minutes}분`;
    }
  }

  // 📊 상태 조회
  getStatus() {
    const moduleStatuses = {};
    for (const [name, module] of this.moduleInstances) {
      moduleStatuses[name] = module.getStats
        ? module.getStats()
        : { active: true };
    }

    return {
      initialized: this.isInitialized,
      totalModules: this.moduleInstances.size,
      activeCallbacks: this.processingCallbacks.size,
      modules: moduleStatuses,
    };
  }

  // 🧹 정리
  async cleanup() {
    logger.info("🧹 ModuleManager 정리 시작...");

    for (const [name, module] of this.moduleInstances) {
      try {
        if (module.cleanup) {
          await module.cleanup();
        }
        logger.debug(`✅ ${name} 정리 완료`);
      } catch (error) {
        logger.error(`❌ ${name} 정리 실패:`, error);
      }
    }

    this.moduleInstances.clear();
    this.processingCallbacks.clear();
    this.isInitialized = false;

    logger.info("✅ ModuleManager 정리 완료");
  }
}

module.exports = ModuleManager;
