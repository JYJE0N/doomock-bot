// src/services/FortuneService.js

const BaseService = require("./BaseService");
const logger = require('../utils/core/Logger');
const TimeHelper = require('../utils/formatting/TimeHelper');
const { isDeveloper, getUserId, getUserName } = require('../utils/helpers/UserHelper');

const {
  FULL_TAROT_DECK,
  CELTIC_CROSS_POSITIONS,
  TarotHelpers,
  TarotAnalytics
} = require("../data/TarotData");

const {
  QUESTION_CATEGORIES,
  TRIPLE_SPREAD_INTERPRETATIONS,
  CELTIC_CROSS_INTERPRETATIONS,
  InterpretationHelpers
} = require("../data/FortuneInterpretations");

const KoreanPostpositionHelper = require("../utils/KoreanPostpositionHelper");

class FortuneService extends BaseService {
  constructor(options = {}) {
    super("FortuneService", options);
    this.tarotDeck = [...FULL_TAROT_DECK];
    this.celticPositions = CELTIC_CROSS_POSITIONS;
    this.config = {
      maxDrawsPerDay: 5,
      maxHistoryRecords: 100,
      specialDrawHours: [0, 12]
    };
    this.stats = { totalDraws: 0, cardFrequency: {}, popularTypes: {} };
  }

  getRequiredModels() {
    return ["Fortune"];
  }

  async onInitialize() {
    try {
      this.Fortune = this.models?.Fortune;
      if (this.Fortune) await this.createIndexes();
      logger.success("‚úÖ FortuneService Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
    } catch (error) {
      logger.error("FortuneService Ï¥àÍ∏∞Ìôî Ïã§Ìå®:", error);
      throw error;
    }
  }

  async createIndexes() {
    if (!this.Fortune?.collection) return;
    await this.Fortune.collection.createIndex({ userId: 1, createdAt: -1 });
    await this.Fortune.collection.createIndex({ "draws.timestamp": -1 });
  }

  async drawCard(user, options = {}) {
    const { type = "single", question = null } = options;
    const limitCheck = await this.checkDailyLimit(
      user,
      this.config.maxDrawsPerDay
    );

    if (!limitCheck.allowed) {
      return {
        success: false,
        message: limitCheck.message,
        data: { ...limitCheck }
      };
    }

    const drawResult = this.performCardDraw(type, question);

    // üî• interpretation ÏÉùÏÑ± Ï†ÑÏóê Ïπ¥ÎìúÏóê Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    const enrichedDrawResult = {
      ...drawResult,
      cards: drawResult.cards.map((card) => ({
        ...card,
        meaning: card.meaning || this.getCardBasicMeaning(card),
        keywords: card.keywords || this.getCardKeywords(card),
        emoji: card.emoji || "üé¥",
        advice: card.advice || this.getCardAdvice(card) // advice Ï∂îÍ∞Ä
      }))
    };

    const interpretation = await this.generateInterpretation(
      enrichedDrawResult.cards,
      type,
      question,
      user
    );

    if (this.Fortune) {
      await this.saveDrawRecord(getUserId(user), {
        ...enrichedDrawResult,
        interpretation
      });
    }

    this.updateStats(type, enrichedDrawResult.cards);
    const bossMessage = this.generateBossMessage(
      type,
      enrichedDrawResult,
      getUserId(user)
    );
    const newLimitCheck = await this.checkDailyLimit(
      user,
      this.config.maxDrawsPerDay
    );

    return {
      success: true,
      message: bossMessage,
      data: {
        ...enrichedDrawResult,
        interpretation,
        ...newLimitCheck
      }
    };
  }

  /**
   * üìä ÏùºÏùº Ï†úÌïú ÌôïÏù∏ (undefined Ïò§Î•ò ÏàòÏ†ï)
   */
  async checkDailyLimit(user, maxDrawsPerDay) {
    const userId = getUserId(user);
    const today = TimeHelper.getKSTDate();
    const startOfDay = new Date(today);
    startOfDay.setHours(0, 0, 0, 0);
    const maxDraws = maxDrawsPerDay || this.config.maxDrawsPerDay;

    try {
      const userDoc = this.Fortune
        ? await this.Fortune.findOne({ userId })
        : null;
      const todayCount = userDoc
        ? userDoc.draws.filter((draw) => new Date(draw.timestamp) >= startOfDay)
            .length
        : 0;

      if (isDeveloper(user)) {
        return {
          allowed: true,
          isDeveloper: true,
          remainingDraws: Infinity,
          todayCount
        };
      }

      const remainingDraws = Math.max(0, maxDraws - todayCount);

      if (remainingDraws <= 0) {
        return {
          allowed: false,
          message: `Ïò§ÎäòÏùò Ïö¥ÏÑ∏ ÌöüÏàòÎ•º Î™®Îëê ÏÇ¨Ïö©ÌñàÏäµÎãàÎã§. (${todayCount}/${maxDraws})`,
          remainingDraws: 0,
          todayCount
        };
      }

      return { allowed: true, isDeveloper: false, remainingDraws, todayCount };
    } catch (error) {
      logger.error("ÏùºÏùº Ï†úÌïú ÌôïÏù∏ Ïã§Ìå®:", error);
      return { allowed: true, remainingDraws: 1, todayCount: 0 };
    }
  }

  /**
   * üìú ÏÇ¨Ïö©Ïûê Í∏∞Î°ù Ï°∞Ìöå (ÏïàÏ†ïÏÑ± Í∞ïÌôî Î∞è ÌïµÏã¨ Ïπ¥Îìú Ï†ïÎ≥¥ Ï∂îÍ∞Ä)
   */
  async getDrawHistory(userId, limit = 3) {
    try {
      const emptyResult = { success: true, data: { records: [], total: 0 } };

      if (!this.Fortune) return emptyResult;

      const user = await this.Fortune.findOne({ userId });
      if (!user || !user.draws || user.draws.length === 0) {
        return emptyResult;
      }

      // üî• sliceÏùò Ïù∏Îç±Ïä§ ÏàòÏ†ï (ÏµúÍ∑º Í∏∞Î°ùÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞ ÏúÑÌï¥)
      const records = user.draws
        .slice(-limit) // ÎßàÏßÄÎßâ NÍ∞ú (ÏµúÏã†Ïàú)
        .reverse() // Ïó≠ÏàúÏúºÎ°ú Ï†ïÎ†¨
        .map((draw) => {
          try {
            if (!draw.cards || draw.cards.length === 0) return null;

            // üî• Í∏∞Î°ùÏóêÏÑú ÌïµÏã¨ Ïπ¥Îìú ÏÑ†ÌÉù Î°úÏßÅ Í∞ÑÏÜåÌôî
            let keyCard = null;
            if (draw.type === "single" && draw.cards.length > 0) {
              keyCard = draw.cards[0];
            } else if (draw.type === "triple" && draw.cards.length >= 3) {
              keyCard = draw.cards[2]; // ÎØ∏Îûò Ïπ¥Îìú
            } else if (draw.type === "celtic" && draw.cards.length > 0) {
              // Í≤∞Í≥º Ïπ¥Îìú ÎòêÎäî Ï≤´ Î≤àÏß∏ Î©îÏù¥Ï†Ä Ïπ¥Îìú
              keyCard =
                draw.cards[9] ||
                draw.cards.find((c) => c.arcana === "major") ||
                draw.cards[0];
            }

            return {
              date: TimeHelper.format(draw.timestamp, "relative"),
              type: draw.type,
              keyCard: keyCard
                ? {
                    name: keyCard.name || keyCard.korean || "Ïïå Ïàò ÏóÜÎäî Ïπ¥Îìú",
                    korean: keyCard.korean || keyCard.name || "Ïïå Ïàò ÏóÜÎäî Ïπ¥Îìú",
                    emoji: keyCard.emoji || "üé¥",
                    isReversed: keyCard.isReversed || false,
                    // üî• meaningÍ≥º keywords ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
                    meaning:
                      keyCard.meaning ||
                      this.getCardBasicMeaning(keyCard) ||
                      "Ìï¥ÏÑùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§",
                    keywords:
                      keyCard.keywords &&
                      Array.isArray(keyCard.keywords) &&
                      keyCard.keywords.length > 0
                        ? keyCard.keywords
                        : this.getCardKeywords(keyCard) || []
                  }
                : null
            };
          } catch (mapError) {
            logger.error(`Í∏∞Î°ù Í∞ÄÍ≥µ Ï§ë Ïò§Î•ò Î∞úÏÉù (ID: ${draw._id}):`, mapError);
            return null;
          }
        })
        .filter((record) => record !== null);

      return {
        success: true,
        data: {
          records,
          total: user.draws.length
        }
      };
    } catch (error) {
      logger.error("Í∏∞Î°ù Ï°∞Ìöå Ïã§Ìå®:", error);
      return {
        success: false,
        data: { records: [], total: 0 },
        message: "Í∏∞Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
      };
    }
  }

  // ... (Ïù¥Ìïò Îã§Î•∏ Ìï®ÏàòÎì§ÏùÄ Ïù¥Ï†ÑÍ≥º ÎèôÏùºÌïòÍ≤å Ïú†ÏßÄ) ...

  // Ïπ¥Îìú Í∏∞Î≥∏ ÏùòÎØ∏ Í∞ÄÏ†∏Ïò§Í∏∞
  getCardBasicMeaning(card) {
    const tarotCard = this.tarotDeck.find((t) => t.id === card.id);
    if (!tarotCard) return "Ìï¥ÏÑùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§";

    // meaningÏù¥ Í∞ùÏ≤¥ ÌòïÌÉúÎ°ú Ï†ÄÏû•ÎêòÏñ¥ ÏûàÎäî Í≤ΩÏö∞
    if (tarotCard.meaning && typeof tarotCard.meaning === "object") {
      return card.isReversed
        ? tarotCard.meaning.reversed || "Ïó≠Î∞©Ìñ• Ìï¥ÏÑù"
        : tarotCard.meaning.upright || "Ï†ïÎ∞©Ìñ• Ìï¥ÏÑù";
    }

    // meaningÏù¥ Î¨∏ÏûêÏó¥Ïù∏ Í≤ΩÏö∞
    return tarotCard.meaning || "Ìï¥ÏÑùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§";
  }

  // Ïπ¥Îìú ÌÇ§ÏõåÎìú Í∞ÄÏ†∏Ïò§Í∏∞
  getCardKeywords(card) {
    const tarotCard = this.tarotDeck.find((t) => t.id === card.id);
    if (!tarotCard) return [];

    // üî• keywordsÎäî Ïπ¥ÎìúÏùò ÏµúÏÉÅÏúÑ Î†àÎ≤®Ïóê ÏûàÏùå!
    return tarotCard.keywords || [];
  }

  performCardDraw(type, question) {
    const deck = this.createShuffledDeck();
    let cards = [];
    switch (type) {
      case "single":
        cards = [this.drawSingleCardFromDeck(deck)];
        break;
      case "triple":
        cards = this.drawTripleCards(deck);
        break;
      case "celtic":
        cards = this.drawCelticCross(deck);
        break;
      default:
        cards = [this.drawSingleCardFromDeck(deck)];
    }
    return { type, question, timestamp: new Date(), cards };
  }

  createShuffledDeck() {
    const deck = [...this.tarotDeck];
    for (let i = deck.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [deck[i], deck[j]] = [deck[j], deck[i]];
    }
    return deck;
  }

  drawSingleCardFromDeck(deck) {
    if (deck.length === 0) throw new Error("Îç±Ïóê Ïπ¥ÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§");
    const card = deck.splice(Math.floor(Math.random() * deck.length), 1)[0];
    return { ...card, isReversed: this.shouldBeReversed(card) };
  }

  drawTripleCards(deck) {
    return ["past", "present", "future"].map((pos) => ({
      ...this.drawSingleCardFromDeck(deck),
      position: pos,
      positionName: this.getPositionName(pos)
    }));
  }

  drawCelticCross(deck) {
    return CELTIC_CROSS_POSITIONS.map((pos, i) => ({
      ...this.drawSingleCardFromDeck(deck),
      position: pos.key, // pos.positionÏù¥ ÏïÑÎãå pos.key ÏÇ¨Ïö©
      positionName: pos.name,
      positionDescription: pos.description,
      order: i + 1
    }));
  }

  shouldBeReversed(card) {
    if (card.arcana === "major") return Math.random() < 0.3;
    if (card.court) return Math.random() < 0.25;
    return Math.random() < 0.2;
  }
  async generateInterpretation(cards, type, question, user) {
    const category = InterpretationHelpers.detectQuestionCategory(question);
    const analysis = TarotAnalytics.analyzeCardCombination(cards);
    let overall;
    switch (type) {
      case "single":
        overall = this.interpretSingleSpread(cards[0], category, question);
        break;
      case "triple":
        overall = this.interpretTripleSpread(cards, category, question);
        break;
      case "celtic":
        overall = this.interpretCelticSpread(cards, category, question);
        break;
    }
    const advice = this.generatePersonalizedAdvice(
      cards,
      analysis,
      category,
      user
    );
    return {
      category,
      type,
      cards: cards.map((c) => this.interpretSingleCard(c, category)),
      overall,
      advice,
      specialPatterns: InterpretationHelpers.detectSpecialPatterns(cards),
      analysis
    };
  }

  // Ïπ¥ÎìúÏùò advice Í∞ÄÏ†∏Ïò§Í∏∞ Î©îÏÑúÎìú Ï∂îÍ∞Ä
  getCardAdvice(card) {
    const tarotCard = this.tarotDeck.find((t) => t.id === card.id);
    if (!tarotCard) return null;
    return tarotCard.advice || null;
  }

  interpretSingleCard(card, category) {
    const basicMeaning = TarotHelpers.getCardMeaning(card, card.isReversed);
    const special = QUESTION_CATEGORIES[category]?.interpretations?.[card.name];

    // meaningÏù¥ Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ Ï≤òÎ¶¨
    let meaningText = "";
    if (card.meaning && typeof card.meaning === "object") {
      meaningText = card.isReversed
        ? card.meaning.reversed || basicMeaning
        : card.meaning.upright || basicMeaning;
    } else if (special) {
      meaningText = card.isReversed
        ? special.reversed || basicMeaning
        : special.upright || basicMeaning;
    } else {
      meaningText = card.meaning || basicMeaning;
    }

    return {
      ...card,
      meaning: meaningText, // Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
      keywords:
        card.keywords && card.keywords.length > 0
          ? card.keywords
          : this.getCardKeywords(card),
      emoji: card.emoji || "üé¥"
      // advice ÌïÑÎìú Ï†úÍ±∞
    };
  }

  // Ïïà ÎêòÎ©¥ Ï£ºÏÑùÏ≤òÎ¶¨ ÌïòÎùº
  generateSimpleAdvice(card, category) {
    const categoryAdvice = {
      love: {
        positive:
          "ÏÇ¨ÎûëÏóê ÏûàÏñ¥ Í∏çÏ†ïÏ†ÅÏù∏ Î≥ÄÌôîÍ∞Ä ÏòàÏÉÅÎê©ÎãàÎã§. ÎßàÏùåÏùÑ Ïó¥Í≥† Í∏∞ÌöåÎ•º Î∞õÏïÑÎì§Ïù¥ÏÑ∏Ïöî.",
        negative:
          "Í¥ÄÍ≥ÑÏóêÏÑú Ïã†Ï§ëÌï®Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÏÑúÎëêÎ•¥ÏßÄ ÎßêÍ≥† Ï≤úÏ≤úÌûà ÏßÑÌñâÌïòÏÑ∏Ïöî."
      },
      career: {
        positive:
          "ÏßÅÏóÖÏ†Å ÏÑ±Ïû•Ïùò Í∏∞ÌöåÍ∞Ä Îã§Í∞ÄÏòµÎãàÎã§. ÏûêÏã†Í∞êÏùÑ Í∞ÄÏßÄÍ≥† ÎèÑÏ†ÑÌïòÏÑ∏Ïöî.",
        negative: "ÏóÖÎ¨¥ÏóêÏÑú Ï£ºÏùòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. ÏÑ∏Î∂ÄÏÇ¨Ìï≠ÏùÑ ÍººÍººÌûà ÌôïÏù∏ÌïòÏÑ∏Ïöî."
      },
      general: {
        positive:
          "Í∏çÏ†ïÏ†ÅÏù∏ ÏóêÎÑàÏßÄÍ∞Ä ÎãπÏã†ÏùÑ ÎëòÎü¨Ïã∏Í≥† ÏûàÏäµÎãàÎã§. Ìù¨ÎßùÏùÑ ÏûÉÏßÄ ÎßàÏÑ∏Ïöî.",
        negative:
          "Ïû†Ïãú Î©àÏ∂îÍ≥† ÏÉÅÌô©ÏùÑ Ïû¨ÌèâÍ∞ÄÌï† ÏãúÍ∞ÑÏûÖÎãàÎã§. Í∏âÌïòÍ≤å Í≤∞Ï†ïÌïòÏßÄ ÎßàÏÑ∏Ïöî."
      }
    };

    const isPositive = !card.isReversed && card.arcana === "major";
    const adviceType = isPositive ? "positive" : "negative";
    const categoryKey = category || "general";

    return (
      categoryAdvice[categoryKey]?.[adviceType] ||
      categoryAdvice.general[adviceType]
    );
  }

  interpretSingleSpread(card, category, question) {
    // meaningÏù¥ Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ Ï≤òÎ¶¨
    const meaningText =
      typeof card.meaning === "object"
        ? card.isReversed
          ? card.meaning.reversed
          : card.meaning.upright
        : card.meaning;

    let text = `${card.emoji} **${card.korean}** ${card.isReversed ? "(Ïó≠Î∞©Ìñ•)" : ""}\n\n`;
    text += `*ÌïµÏã¨ Î©îÏãúÏßÄ*: ${meaningText}\n\n`;
    if (card.keywords && Array.isArray(card.keywords)) {
      text += `*ÌÇ§ÏõåÎìú*: ${card.keywords.join(", ")}\n\n`;
    }
    text +=
      card.arcana === "major"
        ? "Î©îÏù¥Ï†Ä ÏïÑÎ•¥Ïπ¥ÎÇò Ïπ¥ÎìúÎ°ú, Ïù∏ÏÉùÏùò Ï§ëÏöîÌïú Ï†ÑÌôòÏ†êÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§.\n"
        : `${TarotHelpers.getSuitDescription(card.suit)}\n`;
    return text;
  }

  interpretTripleSpread(cards, category, question) {
    let interpretation = "_Í≥ºÍ±∞ > ÌòÑÏû¨ > ÎØ∏ÎûòÏùò ÌùêÎ¶Ñ_\n\n";
    cards.forEach((card, index) => {
      interpretation +=
        this.getTriplePositionInterpretation(card, card.position, index) +
        "\n\n";
    });
    const flowType = this.analyzeTripleFlow(cards);
    interpretation += `*Ï†ÑÏ≤¥Ï†ÅÏù∏ ÌùêÎ¶Ñ*\n${TRIPLE_SPREAD_INTERPRETATIONS.flow_interpretations[flowType]}`;
    const combinations = this.findCardCombinations(cards);
    if (combinations.length > 0)
      interpretation += `\n\n**ÌäπÎ≥ÑÌïú Ï°∞Ìï©**\n${combinations.join("\n")}`;
    return interpretation;
  }

  interpretCelticSpread(cards, category, question) {
    let interpretation =
      "**Ï∫òÌã± ÌÅ¨Î°úÏä§ - 10Ïû•Ïùò Ïπ¥ÎìúÍ∞Ä Î≥¥Ïó¨Ï£ºÎäî Ï†ÑÏ≤¥ ÏÉÅÌô©**\n\n";

    // Í∞Å Ïπ¥ÎìúÍ∞Ä Ïò¨Î∞îÎ•∏ positionÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÎäîÏßÄ ÎîîÎ≤ÑÍπÖ
    console.log(
      "Celtic cards positions:",
      cards.map((c) => ({
        position: c.position,
        name: c.korean
      }))
    );

    const areas = {
      center: ["present", "challenge"],
      timeline: ["distant_past", "recent_past", "future", "immediate_future"],
      internal: ["approach", "hopes_fears"],
      external: ["environment"],
      outcome: ["outcome"]
    };

    Object.entries(areas).forEach(([area, positions]) => {
      const areaCards = cards.filter((c) => positions.includes(c.position));
      if (areaCards.length > 0) {
        interpretation += `\n**${this.getAreaTitle(area)}**\n`;
        areaCards.forEach((card) => {
          interpretation += `- ${card.positionName || card.position}: ${card.emoji} ${card.korean}${card.isReversed ? " (Ïó≠)" : ""}\n`;
        });
        if (CELTIC_CROSS_INTERPRETATIONS?.area_synthesis?.[area]) {
          interpretation += `\n*${CELTIC_CROSS_INTERPRETATIONS.area_synthesis[area]}*\n`;
        }
      }
    });

    // createCelticStoryÎèÑ ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
    if (cards.length >= 10) {
      interpretation +=
        "\n**Ï†ÑÏ≤¥ Ïù¥ÏïºÍ∏∞**\n" + this.createCelticStory(cards, question);
    }

    interpretation +=
      "\n\n**ÌïµÏã¨ Ï°∞Ïñ∏**\n" + this.generateCelticAdvice(cards, category);
    return interpretation;
  }

  // createCelticStory Î©îÏÑúÎìúÎèÑ ÏàòÏ†ï
  createCelticStory(cards, question) {
    // CELTIC_CROSS_INTERPRETATIONSÏù¥ Ï†ïÏùòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    if (!CELTIC_CROSS_INTERPRETATIONS?.story_templates?.[0]?.template) {
      return "Ïπ¥ÎìúÎì§Ïù¥ Î≥¥Ïó¨Ï£ºÎäî Ïù¥ÏïºÍ∏∞Î•º ÌÜµÌï¥ ÎãπÏã†Ïùò Ïó¨Ï†ïÏùÑ Ïù¥Ìï¥Ìï¥Î≥¥ÏÑ∏Ïöî.";
    }

    const templateFn = CELTIC_CROSS_INTERPRETATIONS.story_templates[0].template;
    const cardData = cards.reduce((acc, card) => {
      if (card.position && card.korean) {
        acc[card.position] = card.korean;
      }
      return acc;
    }, {});

    // ÌïÑÏàò Ïπ¥ÎìúÎì§Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    const requiredPositions = ["present", "challenge", "outcome"];
    const hasAllRequired = requiredPositions.every((pos) => cardData[pos]);

    if (!hasAllRequired) {
      return "Ïπ¥ÎìúÎì§Ïù¥ Î≥¥Ïó¨Ï£ºÎäî Ï†ÑÏ≤¥Ï†ÅÏù∏ ÌùêÎ¶ÑÏùÑ ÌÜµÌï¥ ÌÜµÏ∞∞ÏùÑ ÏñªÏúºÏÑ∏Ïöî.";
    }

    return templateFn(cardData);
  }

  generatePersonalizedAdvice(cards, analysis, category, user) {
    const userName = getUserName(user);
    const _kph = KoreanPostpositionHelper;
    let advice = `${userName}Îãò,\n\n`;
    if (cards.length === 1) {
      const card = cards[0];
      const cardAdvice =
        card.advice ||
        (card.isReversed ? card.meaning.reversed : card.meaning.upright);
      advice += `üîÆ‚ú® ${cardAdvice}\n\n`;
    }
    if (cards.length > 1) {
      if (analysis.majorCount > cards.length / 2)
        advice +=
          "üí° Ïù∏ÏÉùÏùò Ï§ëÏöîÌïú Ï†ÑÌôòÏ†êÏùº Ïàò ÏûàÏäµÎãàÎã§. Í∞Å Ïπ¥ÎìúÏùò ÏòÅÏ†Å Î©îÏãúÏßÄÏóê ÍπäÏù¥ Í∑Ä Í∏∞Ïö∏Ïó¨ Î≥¥ÏÑ∏Ïöî.\n";
      if (analysis.reversedCount > cards.length / 2)
        advice +=
          "üí° ÎßéÏùÄ ÏóêÎÑàÏßÄÍ∞Ä ÎÇ¥Î©¥ÏúºÎ°ú Ìñ•ÌïòÍ≥† ÏûàÏäµÎãàÎã§. Ïô∏Î∂Ä ÌôúÎèôÎ≥¥Îã§Îäî ÏûêÍ∏∞ ÏÑ±Ï∞∞Ïùò ÏãúÍ∞ÑÏù¥ ÌïÑÏöîÌï¥ Î≥¥ÏûÖÎãàÎã§.\n";
      const dominantSuit = Object.entries(analysis.suits).sort(
        ([, a], [, b]) => b - a
      )[0];
      if (dominantSuit && dominantSuit[1] >= cards.length / 2) {
        const suitAdvice = {
          wands:
            "üî• ÌñâÎèôÎ†•Í≥º Ïó¥Ï†ïÏù¥ ÎÑòÏπòÎäî ÏãúÍ∏∞ÏûÖÎãàÎã§. ÏßÄÍ∏à Í≥ÑÌöçÌïú ÏùºÏùÑ Ï∂îÏßÑÌï¥ Î≥¥ÏÑ∏Ïöî.",
          cups: "üíß Í∞êÏ†ïÍ≥º Í¥ÄÍ≥ÑÍ∞Ä Ï§ëÏöîÌïú ÏãúÏ†êÏûÖÎãàÎã§. ÎßàÏùåÏùò ÏÜåÎ¶¨Î•º Îî∞Î•¥Îäî Í≤ÉÏù¥ Ï¢ãÍ≤†ÏäµÎãàÎã§.",
          swords:
            "‚öîÔ∏è Î™ÖÌôïÌïú ÏÇ¨Í≥†ÏôÄ ÏÜåÌÜµÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú ÏÉÅÌô©ÏùÑ Î∂ÑÏÑùÌïòÍ≥† Í≤∞Îã®ÌïòÏÑ∏Ïöî.",
          pentacles:
            "üí∞ ÌòÑÏã§Ï†ÅÏù¥Í≥† Ïã§Ïö©Ï†ÅÏù∏ Ï†ëÍ∑ºÏù¥ Ï§ëÏöîÌï©ÎãàÎã§. Íæ∏Ï§ÄÌï®Ïù¥ Í≤∞Ïã§ÏùÑ Îß∫ÏùÑ Í≤ÉÏûÖÎãàÎã§."
        };
        advice += (suitAdvice[dominantSuit[0]] || "") + "\n";
      }
    }
    if (category !== "general") {
      advice += `\n**${QUESTION_CATEGORIES[category].name}**Í≥º Í¥ÄÎ†®ÌïòÏó¨:\n${this.getCategorySpecificAdvice(cards, category)}`;
    }
    if (advice.split("\n").filter((line) => line.trim() !== "").length <= 2) {
      advice +=
        "üí° Ïπ¥ÎìúÏùò Ï†ÑÏ≤¥Ï†ÅÏù∏ ÌùêÎ¶ÑÏùÑ ÏùΩÍ≥†, ÎãπÏã†Ïùò ÏßÅÍ¥ÄÏùÑ ÎØøÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§.";
    }
    return advice;
  }
  getCategorySpecificAdvice(cards, category) {
    const primaryCard =
      cards.find((c) => c.position === "outcome") ||
      cards.find((c) => c.position === "present") ||
      cards[cards.length - 1];
    const adviceTemplates = {
      love: [
        `${primaryCard.korean} Ïπ¥ÎìúÎäî Í¥ÄÍ≥ÑÏóêÏÑú ÏßÑÏã§Ìïú ÏÜåÌÜµÏù¥ Ï§ëÏöîÌïòÎã§Í≥† ÎßêÌï¥Ï£ºÍ≥† ÏûàÏñ¥Ïöî.`,
        `ÌòÑÏû¨ ÏÇ¨ÎûëÏùò Í∏∞Ïö¥ÏùÄ ${primaryCard.korean}Ïùò ÏòÅÌñ•ÏùÑ Î∞õÍ≥† ÏûàÏäµÎãàÎã§. ÏÉÅÎåÄÎ∞©Ïùò ÏûÖÏû•ÏùÑ Í≥†Î†§Ìï¥Î≥¥ÏÑ∏Ïöî.`
      ],
      career: [
        `${primaryCard.korean} Ïπ¥ÎìúÎ•º Î≥º Îïå, ÌòÑÏû¨ ÏóÖÎ¨¥ÏóêÏÑú Ï∞ΩÏùòÎ†•ÏùÑ Î∞úÌúòÌï† Ï¢ãÏùÄ Í∏∞ÌöåÎ°ú Î≥¥ÏûÖÎãàÎã§.`,
        `ÏßÅÏóÖÏ†ÅÏúºÎ°ú ${primaryCard.korean}Ïùò ÏóêÎÑàÏßÄÍ∞Ä Í∞ïÌï©ÎãàÎã§. ÎèôÎ£åÏôÄÏùò ÌòëÎ†•Ïù¥ Ï¢ãÏùÄ Í≤∞Í≥ºÎ•º Í∞ÄÏ†∏Ïò¨ Í≤ÉÏûÖÎãàÎã§.`
      ],
      money: [
        `Ïû¨Î¨ºÏö¥Í≥º Í¥ÄÎ†®ÌïòÏó¨ ${primaryCard.korean} Ïπ¥ÎìúÎäî Ïã†Ï§ëÌïú ÏßÄÏ∂ú Í¥ÄÎ¶¨Í∞Ä ÌïÑÏöîÌï®ÏùÑ ÏïîÏãúÌï©ÎãàÎã§.`,
        `${primaryCard.korean}Ïùò Îì±Ïû•ÏùÄ ÏÉàÎ°úÏö¥ Ïû¨Ï†ïÏ†Å Í∏∞ÌöåÎ•º ÏùòÎØ∏Ìï† Ïàò ÏûàÏäµÎãàÎã§. Ïûò ÏÇ¥Ìé¥Î≥¥ÏÑ∏Ïöî.`
      ],
      health: [
        `${primaryCard.korean} Ïπ¥ÎìúÎäî Î™∏Í≥º ÎßàÏùåÏùò Í∑†ÌòïÏùÑ Ï∞æÏúºÎùºÍ≥† Ï°∞Ïñ∏Ìï©ÎãàÎã§.`,
        `Í±¥Í∞ïÏùÑ ÏúÑÌï¥ ${primaryCard.korean}Ïù¥ ÏÉÅÏßïÌïòÎäî ÌôúÎèôÏ†ÅÏù∏ ÏóêÎÑàÏßÄÎ•º ÌôúÏö©Ìï¥ Î≥¥ÏÑ∏Ïöî.`
      ]
    };
    const specificAdvice = adviceTemplates[category] || [
      `${primaryCard.korean} Ïπ¥ÎìúÏùò ÏùòÎØ∏Î•º ÌòÑÏû¨ ÏÉÅÌô©Ïóê ÎßûÍ≤å ÍπäÏù¥ ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî.`
    ];
    return specificAdvice[Math.floor(Math.random() * specificAdvice.length)];
  }

  async saveDrawRecord(userId, drawData) {
    try {
      if (!this.Fortune) return;

      // üî• cards Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•Ìï† Îïå meaningÍ≥º keywords Ìè¨Ìï®
      const record = {
        ...drawData,
        cards: drawData.cards.map(({ drawnAt, ...card }) => ({
          ...card,
          // Ïπ¥ÎìúÏùò Ìï¥ÏÑù Ï†ïÎ≥¥ÎèÑ Ìï®Íªò Ï†ÄÏû•
          // üî• meaningÏùÑ Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò (Ï§ëÏöî!)
          meaning:
            typeof card.meaning === "object"
              ? card.isReversed
                ? card.meaning.reversed
                : card.meaning.upright
              : card.meaning || "",
          keywords: Array.isArray(card.keywords) ? card.keywords : [],
          emoji: card.emoji || "üé¥",
          advice: card.advice || ""
        }))
      };
      await this.Fortune.findOneAndUpdate(
        { userId },
        {
          $push: {
            draws: { $each: [record], $slice: -this.config.maxHistoryRecords }
          },
          $inc: {
            "stats.totalDraws": 1,
            [`stats.typeCount.${drawData.type}`]: 1
          },
          $set: { lastDrawAt: drawData.timestamp }
        },
        { upsert: true, new: true }
      );
    } catch (error) {
      logger.error("ÎΩëÍ∏∞ Í∏∞Î°ù Ï†ÄÏû• Ïã§Ìå®:", error);
    }
  }

  generateBossMessage(type, drawResult, userId) {
    const messages = {
      single: [
        "ÎëêÎ™©: 'Ìïú Ïû•Ïùò Ïπ¥ÎìúÍ∞Ä Î™®Îì† ÎãµÏùÑ Îã¥Í≥† ÏûàÏßÄ!'",
        "ÎëêÎ™©: 'Ïö∞Ï£ºÏùò Î©îÏãúÏßÄÍ∞Ä ÎèÑÏ∞©ÌñàÎã§Íµ¨!'"
      ],
      triple: [
        "ÎëêÎ™©: 'Í≥ºÍ±∞, ÌòÑÏû¨, ÎØ∏ÎûòÍ∞Ä ÌïúÎààÏóê Î≥¥Ïù¥ÎäîÍµ¨ÎÇò!'",
        "ÎëêÎ™©: 'ÏãúÍ∞ÑÏùò ÌùêÎ¶Ñ ÏÜçÏóêÏÑú ÎãµÏùÑ Ï∞æÏïÑÎ¥ê!'"
      ],
      celtic: [
        "ÎëêÎ™©: 'Ï∫òÌã± ÌÅ¨Î°úÏä§! Í∞ÄÏû• Ïã†ÏÑ±Ìïú Î∞∞ÏπòÏïº!'",
        "ÎëêÎ™©: '10Ïû•Ïùò Ïπ¥ÎìúÍ∞Ä ÎÑàÏùò Ïö∞Ï£ºÎ•º Í∑∏Î†§ÎÉàÏñ¥!'"
      ],
      special: [
        "ÎëêÎ™©: 'Ïò§ÎäòÏùÄ ÌäπÎ≥ÑÌïú ÎÇ†! Ïπ¥ÎìúÎèÑ Îçî Î∞ùÍ≤å ÎπõÎÇòÎäîÍµ∞!'",
        "ÎëêÎ™©: 'ÌñâÏö¥Ïùò ÏãúÍ∞ÑÏóê ÎΩëÏïòÍµ¨ÎÇò! Ï¢ãÏùÄ ÏùºÏù¥ ÏÉùÍ∏∏Í±∞Ïïº!'"
      ]
    };
    const typeMessages = this.isSpecialDrawTime(new Date())
      ? messages.special
      : messages[type] || messages.single;
    return typeMessages[Math.floor(Math.random() * typeMessages.length)];
  }

  isSpecialDrawTime(time) {
    return this.config.specialDrawHours.includes(time.getHours());
  }
  updateStats(type, cards) {
    this.stats.totalDraws++;
    this.stats.popularTypes[type] = (this.stats.popularTypes[type] || 0) + 1;
    cards.forEach(
      (card) =>
        (this.stats.cardFrequency[card.id] =
          (this.stats.cardFrequency[card.id] || 0) + 1)
    );
  }
  async shuffleDeck(userId) {
    return {
      success: true,
      message: "Ïπ¥ÎìúÎì§Ïù¥ Ïö∞Ï£ºÏùò ÏóêÎÑàÏßÄÎ°ú ÏÉàÎ°≠Í≤å ÏÑûÏòÄÏäµÎãàÎã§! ‚ú®"
    };
  }

  async getUserStats(userId) {
    if (!this.Fortune)
      return { success: true, data: this.generateDummyStats() };
    const user = await this.Fortune.findOne({ userId });
    if (!user) return { success: true, data: this.generateDummyStats() };

    // Í∞ÄÏû• ÎßéÏù¥ ÎÇòÏò® Ïπ¥Îìú Ï∞æÍ∏∞
    const favoriteCardObj = user.findFavoriteCard();
    const favoriteCard = favoriteCardObj
      ? `${favoriteCardObj.emoji || "üé¥"} ${favoriteCardObj.korean || favoriteCardObj.name}`
      : null;

    const stats = user.stats ? user.stats.toObject() : {};
    return {
      success: true,
      data: {
        ...stats,
        favoriteCard, // Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôòÎêú Ïπ¥Îìú Ïù¥Î¶Ñ
        todayDraws: this.getTodayDrawCount(user),
        weeklyDraws: this.getWeeklyDrawCount(user)
      }
    };
  }

  generateDummyStats() {
    return {
      totalDraws: 0,
      favoriteCard: null,
      typeStats: {},
      todayDraws: 0,
      weeklyDraws: 0
    };
  }

  getPositionName(position) {
    return (
      { past: "Í≥ºÍ±∞", present: "ÌòÑÏû¨", future: "ÎØ∏Îûò" }[position] || position
    );
  }

  getAreaTitle(area) {
    return (
      {
        center: "ÌïµÏã¨ ÏÉÅÌô©",
        timeline: "ÏãúÍ∞ÑÏùò ÌùêÎ¶Ñ",
        internal: "ÎÇ¥Î©¥Ïùò ÏòÅÌñ•",
        external: "Ïô∏Î∂Ä ÌôòÍ≤Ω",
        outcome: "ÏµúÏ¢Ö Í≤∞Í≥º"
      }[area] || area
    );
  }

  analyzeTripleFlow(cards) {
    const hasPositiveOutcome = ["The Sun", "The Star", "The World"].includes(
      cards[2].name
    );
    const hasChallenges = cards.some(
      (c) =>
        c.isReversed || ["Death", "The Tower", "The Devil"].includes(c.name)
    );
    if (hasPositiveOutcome && !hasChallenges) return "positive_flow";
    if (hasChallenges) return "challenging_flow";
    return "stable_flow";
  }

  findCardCombinations(cards) {
    const combinations = [];
    for (let i = 0; i < cards.length - 1; i++) {
      for (let j = i + 1; j < cards.length; j++) {
        const combo = InterpretationHelpers.findCombinationInterpretation(
          cards[i],
          cards[j]
        );
        if (combo) combinations.push(combo);
      }
    }
    return combinations;
  }

  // createCelticStory(cards, question) {
  //   const templateFn = CELTIC_CROSS_INTERPRETATIONS.story_templates[0].template;
  //   const cardData = cards.reduce((acc, card) => {
  //     acc[card.position] = card.korean;
  //     return acc;
  //   }, {});
  //   return templateFn(cardData);
  // }

  generateCelticAdvice(cards, category) {
    const outcome = cards.find((c) => c.position === "outcome");
    const approach = cards.find((c) => c.position === "approach");

    // Ïπ¥ÎìúÎ•º Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞ Ï≤òÎ¶¨
    if (!outcome || !approach) {
      return "Ïπ¥ÎìúÏùò Ï†ÑÏ≤¥Ï†ÅÏù∏ ÌùêÎ¶ÑÏùÑ ÌÜµÌï¥ ÎãµÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî. ÎãπÏã†Ïùò ÏßÅÍ¥ÄÏùÑ ÎØøÏúºÏÑ∏Ïöî.";
    }

    let advice = `${approach.korean}Ïùò ÏûêÏÑ∏Î°ú Ï†ëÍ∑ºÌïòÎ©¥ ${outcome.korean}Ïùò Í≤∞Í≥ºÎ•º ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§. `;
    const outcomeType = outcome.isReversed ? "challenging" : "positive";

    // CELTIC_CROSS_INTERPRETATIONSÏù¥ Ï†ïÏùòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    if (
      CELTIC_CROSS_INTERPRETATIONS?.position_emphasis?.outcome?.[outcomeType]
    ) {
      advice +=
        CELTIC_CROSS_INTERPRETATIONS.position_emphasis.outcome[outcomeType]();
    }

    return advice;
  }

  getTriplePositionInterpretation(card, position, index) {
    const positionKey =
      index === 0
        ? "past_influence"
        : index === 1
          ? "present_situation"
          : "future_potential";
    const templates = TRIPLE_SPREAD_INTERPRETATIONS.temporal[positionKey];
    const templateFn = templates[Math.floor(Math.random() * templates.length)];
    const cardName = `${card.emoji} ${card.korean}`;
    return templateFn(cardName);
  }

  createDrawSummary(draw) {
    const mainCard = draw.cards[0];
    return `${mainCard.korean} - ${mainCard.isReversed ? "Ïó≠Î∞©Ìñ•" : "Ï†ïÎ∞©Ìñ•"}`;
  }

  getTodayDrawCount(user) {
    const startOfDay = new Date();
    startOfDay.setHours(0, 0, 0, 0);
    return user.draws.filter((draw) => new Date(draw.timestamp) >= startOfDay)
      .length;
  }

  getWeeklyDrawCount(user) {
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    return user.draws.filter((draw) => new Date(draw.timestamp) >= weekAgo)
      .length;
  }

  getStatus() {
    return {
      initialized: this.isInitialized,
      hasDatabase: !!this.Fortune,
      deckSize: this.tarotDeck.length,
      stats: this.stats,
      config: this.config
    };
  }
}

module.exports = FortuneService;
