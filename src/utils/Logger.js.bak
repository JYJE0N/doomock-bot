// src/utils/Logger.js - Winston + Chalk 기반 고급 로깅 시스템
const winston = require("winston");
const chalk = require("chalk");
const path = require("path");
const fs = require("fs");

/**
 * 🎨 고급 로깅 시스템 v3.0.1
 *
 * 특징:
 * - Winston: 다중 transport, 로그 레벨, 파일 로깅
 * - Chalk: 아름다운 컬러 출력
 * - 한국 시간 지원
 * - Railway 환경 최적화
 * - 이모지 + 색상 조합
 */
class AdvancedLogger {
  constructor() {
    if (AdvancedLogger.instance) {
      return AdvancedLogger.instance;
    }

    // 환경 변수
    this.isProduction = process.env.NODE_ENV === "production";
    this.isRailway = !!process.env.RAILWAY_ENVIRONMENT;
    this.logLevel =
      process.env.LOG_LEVEL || (this.isProduction ? "info" : "debug");

    // 로그 디렉토리 생성
    this.logDir = process.env.LOG_DIR || "logs";
    this.ensureLogDirectory();

    // 한국 시간 포맷터
    this.koreaTimeFormat = winston.format.printf(
      ({ timestamp, level, message, ...meta }) => {
        const koreaTime = this.getKoreaTime();
        return `${koreaTime} ${level}: ${message} ${
          Object.keys(meta).length > 0 ? JSON.stringify(meta, null, 2) : ""
        }`;
      }
    );

    // Winston 인스턴스 생성
    this.logger = this.createWinstonLogger();

    // 컬러 테마 설정
    this.setupColorTheme();

    // 이모지 매핑
    this.emojis = {
      error: "❌",
      warn: "⚠️ ",
      info: "ℹ️ ",
      debug: "🐛",
      success: "✅",
      http: "🌐",
      verbose: "📝",
      silly: "🤪",
    };

    AdvancedLogger.instance = this;
  }

  /**
   * 로그 디렉토리 생성
   */
  ensureLogDirectory() {
    if (!this.isRailway && !fs.existsSync(this.logDir)) {
      fs.mkdirSync(this.logDir, { recursive: true });
    }
  }

  /**
   * Winston Logger 생성
   */
  createWinstonLogger() {
    const transports = [];

    // 콘솔 출력 (개발 환경)
    if (!this.isProduction) {
      transports.push(
        new winston.transports.Console({
          format: winston.format.combine(
            winston.format.colorize({ all: true }),
            winston.format.simple()
          ),
        })
      );
    } else {
      // 프로덕션 콘솔 (JSON 형식)
      transports.push(
        new winston.transports.Console({
          format: winston.format.json(),
        })
      );
    }

    // 파일 로깅 (Railway 제외)
    if (!this.isRailway) {
      // 에러 로그 파일
      transports.push(
        new winston.transports.File({
          filename: path.join(this.logDir, "error.log"),
          level: "error",
          maxsize: 5242880, // 5MB
          maxFiles: 5,
          format: winston.format.combine(
            winston.format.timestamp(),
            winston.format.json()
          ),
        })
      );

      // 전체 로그 파일
      transports.push(
        new winston.transports.File({
          filename: path.join(this.logDir, "combined.log"),
          maxsize: 10485760, // 10MB
          maxFiles: 10,
          format: winston.format.combine(
            winston.format.timestamp(),
            winston.format.json()
          ),
        })
      );
    }

    return winston.createLogger({
      level: this.logLevel,
      format: winston.format.combine(
        winston.format.errors({ stack: true }),
        winston.format.splat(),
        winston.format.json()
      ),
      transports,
      exitOnError: false,
    });
  }

  /**
   * Chalk 컬러 테마 설정
   */
  setupColorTheme() {
    this.colors = {
      error: chalk.bold.red,
      warn: chalk.bold.yellow,
      info: chalk.bold.cyan,
      debug: chalk.gray,
      success: chalk.bold.green,
      http: chalk.bold.magenta,
      verbose: chalk.white,
      silly: chalk.dim,

      // 특수 스타일
      timestamp: chalk.dim.gray,
      module: chalk.bold.blue,
      user: chalk.bold.green,
      important: chalk.bold.bgRed.white,
      highlight: chalk.bold.bgYellow.black,
    };
  }

  /**
   * 한국 시간 가져오기
   */
  getKoreaTime() {
    const now = new Date();
    const koreaTime = new Date(
      now.getTime() + 9 * 60 * 60 * 1000 - now.getTimezoneOffset() * 60 * 1000
    );
    return koreaTime.toLocaleString("ko-KR", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: false,
    });
  }

  /**
   * 컬러풀한 콘솔 출력 (Chalk 활용)
   */
  _colorLog(level, message, ...args) {
    const emoji = this.emojis[level] || "📝";
    const color = this.colors[level] || chalk.white;
    const timestamp = this.colors.timestamp(this.getKoreaTime());

    // 메타데이터 처리
    let meta = "";
    if (args.length > 0) {
      if (typeof args[0] === "object") {
        meta = this.formatMetadata(args[0]);
      } else {
        meta = args.join(" ");
      }
    }

    // 컬러풀한 출력
    console.log(
      `${timestamp} ${emoji} ${color(
        level.toUpperCase().padEnd(7)
      )} ${message} ${meta}`
    );

    // Winston에도 기록
    this.logger[level](message, ...args);
  }

  /**
   * 메타데이터 포맷팅
   */
  formatMetadata(obj) {
    const formatted = [];

    for (const [key, value] of Object.entries(obj)) {
      if (key === "userId") {
        formatted.push(`${chalk.gray("user:")}${this.colors.user(value)}`);
      } else if (key === "module") {
        formatted.push(`${chalk.gray("module:")}${this.colors.module(value)}`);
      } else if (key === "error") {
        formatted.push(`${chalk.gray("error:")}${chalk.red(value)}`);
      } else if (key === "duration") {
        formatted.push(
          `${chalk.gray("duration:")}${chalk.yellow(value + "ms")}`
        );
      } else {
        formatted.push(`${chalk.gray(key + ":")}${chalk.white(value)}`);
      }
    }

    return chalk.gray("[") + formatted.join(chalk.gray(", ")) + chalk.gray("]");
  }

  // ===== 🎯 메인 로깅 메서드들 =====

  error(message, ...args) {
    this._colorLog("error", message, ...args);
  }

  warn(message, ...args) {
    this._colorLog("warn", message, ...args);
  }

  info(message, ...args) {
    this._colorLog("info", message, ...args);
  }

  debug(message, ...args) {
    if (this.logLevel === "debug") {
      this._colorLog("debug", message, ...args);
    }
  }

  success(message, ...args) {
    // Winston에는 success 레벨이 없으므로 info로 기록
    const emoji = this.emojis.success;
    const color = this.colors.success;
    const timestamp = this.colors.timestamp(this.getKoreaTime());

    console.log(
      `${timestamp} ${emoji} ${color("SUCCESS".padEnd(7))} ${message}`,
      args.length > 0 ? this.formatMetadata(args[0]) : ""
    );

    this.logger.info(`[SUCCESS] ${message}`, ...args);
  }

  // ===== 🎨 특수 로깅 메서드들 =====

  /**
   * 모듈 시작 로그
   */
  moduleStart(moduleName) {
    const box = chalk.bold.blue("┌─────────────────────────────┐");
    const text =
      chalk.bold.blue("│") +
      chalk.bold.white(` 🚀 ${moduleName} 시작 `.padEnd(28)) +
      chalk.bold.blue("│");
    const bottom = chalk.bold.blue("└─────────────────────────────┘");

    console.log(`\n${box}\n${text}\n${bottom}\n`);
    this.logger.info(`Module started: ${moduleName}`);
  }

  /**
   * 중요 알림
   */
  important(message, ...args) {
    const importantBox = this.colors.important(` ⚡ ${message} `);
    console.log(`\n${importantBox}\n`);
    this.logger.warn(`[IMPORTANT] ${message}`, ...args);
  }

  /**
   * 하이라이트
   */
  highlight(message, ...args) {
    const highlighted = this.colors.highlight(` 💡 ${message} `);
    console.log(highlighted);
    this.logger.info(`[HIGHLIGHT] ${message}`, ...args);
  }

  /**
   * 테이블 출력
   */
  table(data) {
    console.table(data);
    this.logger.info("Table data:", data);
  }

  /**
   * 진행 상황 표시
   */
  progress(current, total, message = "") {
    const percentage = Math.round((current / total) * 100);
    const filled = Math.round(percentage / 5);
    const empty = 20 - filled;

    const bar = chalk.green("█".repeat(filled)) + chalk.gray("░".repeat(empty));
    const text = `${bar} ${chalk.bold(percentage + "%")} ${message}`;

    process.stdout.write(`\r${text}`);

    if (current === total) {
      console.log(""); // 줄바꿈
      this.success(`완료: ${message}`);
    }
  }

  // ===== 📊 통계 및 유틸리티 =====

  /**
   * 로그 레벨 변경
   */
  setLevel(level) {
    this.logLevel = level;
    this.logger.level = level;
    this.info(`로그 레벨 변경: ${level}`);
  }

  /**
   * 성능 측정 로그
   */
  performance(label, startTime) {
    const duration = Date.now() - startTime;
    const color =
      duration < 100 ? chalk.green : duration < 500 ? chalk.yellow : chalk.red;

    this.debug(`⏱️  ${label}`, { duration: color(duration + "ms") });
  }

  /**
   * 메모리 사용량 로그
   */
  memory() {
    const used = process.memoryUsage();
    const format = (bytes) => (bytes / 1024 / 1024).toFixed(2) + " MB";

    this.debug("💾 메모리 사용량", {
      rss: format(used.rss),
      heapTotal: format(used.heapTotal),
      heapUsed: format(used.heapUsed),
      external: format(used.external),
    });
  }

  /**
   * 상태 조회
   */
  getStatus() {
    return {
      initialized: true,
      level: this.logLevel,
      isProduction: this.isProduction,
      isRailway: this.isRailway,
      transports: this.logger.transports.length,
      logDirectory: this.isRailway ? "disabled" : this.logDir,
    };
  }
}

// 싱글톤 인스턴스 생성 및 내보내기
const logger = new AdvancedLogger();

// 기존 코드 호환성을 위한 메서드들
logger.trace = logger.debug;
logger.logTimeInfo = () => logger.info("🕐 시간 정보 로딩 완료");

module.exports = logger;

// ===== 사용 예시 =====
/*
// 기본 로깅
logger.info("서버 시작됨");
logger.error("오류 발생", { error: "Database connection failed" });
logger.warn("경고", { userId: 12345, action: "invalidLogin" });
logger.success("작업 완료");

// 특수 로깅
logger.moduleStart("TodoModule");
logger.important("긴급 공지사항");
logger.highlight("새로운 기능 추가");

// 테이블 출력
logger.table([
  { module: "Todo", status: "active", users: 150 },
  { module: "Timer", status: "active", users: 89 }
]);

// 진행 상황
for (let i = 0; i <= 100; i += 10) {
  logger.progress(i, 100, "데이터 처리 중...");
  await new Promise(resolve => setTimeout(resolve, 100));
}

// 성능 측정
const start = Date.now();
// ... 작업 수행 ...
logger.performance("DB Query", start);

// 메모리 체크
logger.memory();
*/
